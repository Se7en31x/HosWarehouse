// app/utils/axiosInstance.js
import axios from "axios";
import { jwtDecode } from "jwt-decode";

const baseConfig = {
  baseURL: "http://localhost:5000/api", // üëâ backend HosWarehouse (‡πÅ‡∏Å‡πâ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ñ‡πâ‡∏≤ deploy)
  withCredentials: false,
};

// üîé ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å localStorage
const getToken = () => localStorage.getItem("authToken_staff"); // ‡πÉ‡∏ä‡πâ key ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠

// üëâ Admin
export const adminAxios = axios.create(baseConfig);
adminAxios.interceptors.request.use((config) => {
  const token = localStorage.getItem("authToken_admin");
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});

// üëâ ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏±‡∏á
export const manageAxios = axios.create(baseConfig);
manageAxios.interceptors.request.use((config) => {
  const token = localStorage.getItem("authToken_manage");
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});

// üëâ ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏´‡∏°‡∏≠ / ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• / ‡πÄ‡∏†‡∏™‡∏±‡∏ä / staff)
export const staffAxios = axios.create(baseConfig);
staffAxios.interceptors.request.use((config) => {
  const token = getToken();
  if (token) {
    try {
      const decoded = jwtDecode(token);
      console.log("üìå staffAxios detected role:", decoded.role);
      config.headers.Authorization = `Bearer ${token}`;
    } catch (e) {
      console.error("‚ùå Invalid staff token", e);
    }
  }
  return config;
});

// üëâ ‡∏ù‡πà‡∏≤‡∏¢‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠
export const purchasingAxios = axios.create(baseConfig);
purchasingAxios.interceptors.request.use((config) => {
  const token = localStorage.getItem("authToken_purchasing");
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});

// üëâ Default axios (‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å role)
const axiosInstance = axios.create(baseConfig);
export default axiosInstance;
