'use client';

import { useEffect, useState, useMemo } from "react";
import { useParams, useRouter } from "next/navigation";
import Swal from "sweetalert2";
import styles from "./page.module.css";
import axiosInstance from "../../../../utils/axiosInstance";

// ‚úÖ Components
import BasicDetail from "../../../components/inventoryDetail/BasicDetail";
import MedicineDetail from "../../../components/inventoryDetail/MedicineDetail";
import MedsupDetail from "../../../components/inventoryDetail/MedsupDetail";
import EquipmentDetail from "../../../components/inventoryDetail/EquipmentDetail";
import MeddeviceDetail from "../../../components/inventoryDetail/MeddeviceDetail";
import GeneralDetail from "../../../components/inventoryDetail/GeneralDetail";

export default function InventoryDetail() {
  const { id } = useParams();
  const router = useRouter();

  const [item, setItem] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  const formatDate = (dateStr) => {
    if (!dateStr) return "-";
    const d = new Date(dateStr);
    if (isNaN(d)) return "-";
    return d.toLocaleDateString("th-TH", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  // ‚úÖ normalize category
  const normalizeCategory = (raw) => {
    if (raw === null || raw === undefined) return null;
    const key = String(raw).toLowerCase().trim();

    const map = {
      "1": "general",
      "2": "medicine",
      "3": "medsup",
      "4": "equipment",
      "5": "meddevice",
      general: "general",
      medicine: "medicine",
      medsup: "medsup",
      equipment: "equipment",
      meddevice: "meddevice",
      General: "general",
      Medicine: "medicine",
      Medsup: "medsup",
      Equipment: "equipment",
      Meddevice: "meddevice",
    };
    return map[key] || map[raw] || null;
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Item + lots
  useEffect(() => {
    let alive = true;
    setLoading(true);
    setError(null);

    axiosInstance
      .get(`/inventoryCheck/${id}`)
      .then((res) => {
        if (!alive) return;
        setItem(res.data);
        setLoading(false);
      })
      .catch((err) => {
        console.error("‚ùå Error fetching item:", err);
        if (!alive) return;
        setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
        setLoading(false);
      });

    return () => { alive = false; };
  }, [id]);

  // Render form ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ category
  const renderCategoryDetail = () => {
    if (!item) return null;
    const category = normalizeCategory(item.item_category);

    switch (category) {
      case "medicine":
        return <MedicineDetail form={item} />;
      case "medsup":
        return <MedsupDetail form={item} />;
      case "equipment":
        return <EquipmentDetail form={item} />;
      case "meddevice":
        return <MeddeviceDetail form={item} />;
      case "general":
        return <GeneralDetail form={item} />;
      default:
        return null;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î
  const handleDamaged = (lot) => {
    Swal.fire({
      title: `‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î (Lot ${lot.lot_no || "-"})`,
      html:
        `<label for="swal-input1" class="swal2-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∏‡∏î:</label>` +
        `<input id="swal-input1" class="swal2-input" type="number" min="1" max="${lot.remaining_qty}" value="1">` +
        `<label for="swal-input2" class="swal2-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</label>` +
        `<select id="swal-input2" class="swal2-select">
¬† ¬† ¬† ¬† <option value="damaged">‡∏ä‡∏≥‡∏£‡∏∏‡∏î</option>
¬† ¬† ¬† ¬† <option value="lost">‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢</option>
¬† ¬† ¬† </select>` +
        `<label for="swal-input3" class="swal2-label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</label>` +
        `<textarea id="swal-input3" class="swal2-textarea" placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"></textarea>`,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      preConfirm: () => {
        const qty = Number(document.getElementById("swal-input1").value);
        const type = document.getElementById("swal-input2").value;
        const note = document.getElementById("swal-input3").value;

        if (!qty || qty <= 0 || qty > Number(lot.remaining_qty)) {
          Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
          return false;
        }
        return { qty, type, note };
      },
    }).then(async (result) => {
      if (result.isConfirmed) {
        const { qty, type, note } = result.value;
        try {
          await axiosInstance.post(`/damaged`, {
            lot_id: lot.lot_id,
            item_id: lot.item_id,
            qty: Number(qty),
            damage_type: type,
            note: note,
            source_type: "stock_check",
            source_ref_id: lot.lot_id,
            reported_by: 999,
          });

          Swal.fire("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß", "success");
          const res = await axiosInstance.get(`/inventoryCheck/${lot.item_id}`);
          setItem(res.data);
        } catch (err) {
          console.error(err);
          Swal.fire("‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î‡πÑ‡∏î‡πâ", "error");
        }
      }
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
const handleAdjust = (lot) => {
    Swal.fire({
        title: `‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (Lot ${lot.lot_no || "-"})`,
        html:
            `<div class="swal2-html-container">` +
            `<p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: <strong style="color: #007bff; font-weight: 600;">${lot.remaining_qty ?? 0}</strong></p>` +
            `<p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤: <strong style="color: #28a745; font-weight: 600;">${lot.qty_imported ?? 0}</strong></p>` +
            `<label for="swal-input1" class="swal2-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á:</label>` +
            `<input id="swal-input1" class="swal2-input" type="number" min="0" value="${lot.remaining_qty ?? 0}">` +
            `<label for="swal-input2" class="swal2-label">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç):</label>` +
            `<textarea id="swal-input2" class="swal2-textarea" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á"></textarea>` +
            `</div>`,
        focusConfirm: false,
        showCancelButton: true,
        confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á",
        cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        preConfirm: () => {
            const actual_qty = Number(document.getElementById("swal-input1").value);
            const reason = document.getElementById("swal-input2").value.trim();

            if (isNaN(actual_qty) || actual_qty < 0) {
                Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
                return false;
            }

            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤
            if (actual_qty > lot.qty_imported) {
                Swal.showValidationMessage(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á (${actual_qty}) ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (${lot.qty_imported})`);
                return false;
            }

            if (!reason) {
                Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á");
                return false;
            }
            return { actual_qty, reason };
        },
    }).then(async (result) => {
        if (result.isConfirmed) {
            const { actual_qty, reason } = result.value;
            const original_qty = lot.remaining_qty;
            const diff = actual_qty - original_qty;

            if (diff === 0) {
                Swal.fire("üí° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á", "info");
                return;
            }

            try {
                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Endpoint ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
                await axiosInstance.post(`/adjust`, {
                    lot_id: lot.lot_id,
                    item_id: lot.item_id,
                    actual_qty,
                    reason,
                });

                Swal.fire("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
                const res = await axiosInstance.get(`/inventoryCheck/${lot.item_id}`);
                setItem(res.data);
            } catch (err) {
                console.error("‚ùå Error adjusting stock:", err);
                Swal.fire("‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏î‡πâ", "error");
            }
        }
    });
};

  if (loading) return <p className={styles.loading}>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏...</p>;
  if (error) return <p className={styles.error}>‚ùó {error}</p>;
  if (!item) return <p className={styles.noData}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏</p>;

  const categoryTHMap = {
    general: "‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
    medicine: "‡∏¢‡∏≤",
    medsup: "‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏á",
    equipment: "‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå",
    meddevice: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå",
  };
  const categoryKey = normalizeCategory(item.item_category);
  const categoryTH = categoryTHMap[categoryKey] || item.item_category || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó";

  const lots = Array.isArray(item?.lots) ? item.lots : [];

  return (
    <div className={styles.appBg}>
      <div className={styles.containerWide}>
        {/* ===== Overview Card ===== */}
        <div className={styles.overviewCard}>
          <div className={styles.overviewHeader}>
            <div className={styles.overviewMeta}>
              <span className={styles.categoryChip}>{categoryTH}</span>
              <h2 className={styles.itemTitle}>{item.item_name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}</h2>
              {item.item_code && (
                <span className={styles.codeMono}>{item.item_code}</span>
              )}
            </div>

            <div className={styles.overviewImageBox}>
              {item?.item_img ? (
                <img
                  src={`http://localhost:5000/uploads/${item.item_img}`}
                  alt="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏±‡∏™‡∏î‡∏∏"
                  className={styles.overviewImage}
                  onError={(e) => {
                    e.currentTarget.onerror = null;
                    e.currentTarget.replaceWith(
                      Object.assign(document.createElement("div"), {
                        className: styles.overviewImagePlaceholder,
                        innerText: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
                      })
                    );
                  }}
                />
              ) : (
                <div className={styles.overviewImagePlaceholder}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</div>
              )}
            </div>
          </div>
        </div>

        {/* ===== Content Grid ===== */}
        <div className={styles.contentGrid2}>
          <section className={styles.blockCard}>
            <BasicDetail form={item} />
          </section>
          <section className={styles.blockCard}>
            {renderCategoryDetail()}
          </section>
        </div>

        {/* ===== LOT Section ===== */}
        <section className={styles.lotCard}>
          <div className={styles.lotHeaderBar}>
            <h3 className={styles.lotTitle}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Lot</h3>
          </div>

          <div className={styles.tableWrapNice}>
            <table className={`${styles.lotTable} ${styles.tableZebra}`}>
              <thead>
                <tr>
                  <th>Lot No</th>
                  <th>‡∏ú‡∏•‡∏¥‡∏ï</th>
                  <th>‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</th>
                  <th>‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤</th>
                  <th className={styles.center}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤</th>
                  <th className={styles.center}>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                  <th className={styles.center}>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {lots.length > 0 ? (
                  lots.map((lot) => (
                    <tr key={lot.lot_id}>
                      <td>
                        <span style={{ fontFamily: 'ui-monospace', fontWeight: 600 }}>
                          {lot.lot_no ?? "-"}
                        </span>
                      </td>
                      <td>{formatDate(lot.mfg_date)}</td>
                      <td>{formatDate(lot.exp_date)}</td>
                      <td>{formatDate(lot.import_date)}</td>
                      <td className={styles.center}>
                        <span className={styles.qtyPill}>{lot.qty_imported ?? 0}</span>
                      </td>
                      <td className={styles.center}>
                        <span className={styles.qtyPill}>{lot.remaining_qty ?? 0}</span>
                      </td>
                      <td className={styles.center}>
                        <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>
                          <button
                            type="button"
                            onClick={() => handleAdjust(lot)}
                            className={`${styles.actionButton} ${styles.adjustButton}`}
                          >
                            ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                          </button>
                          <button
                            type="button"
                            onClick={() => handleDamaged(lot)}
                            className={`${styles.actionButton} ${styles.damagedButton}`}
                          >
                            ‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={7} style={{ textAlign: 'center', color: '#64748b', padding: '28px 0' }}>
                      ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Lot
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </section>

        {/* ‡∏Å‡∏•‡∏±‡∏ö */}
        <div className={styles.backRow}>
          <button className={styles.backBtn} onClick={() => router.back()} aria-label="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö">
            ‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö
          </button>
        </div>
      </div>
    </div>
  );
}