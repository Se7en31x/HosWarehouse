'use client';

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import Swal from "sweetalert2";
import styles from "./page.module.css";
import axiosInstance from "../../../../utils/axiosInstance";

// ‚úÖ Components
import BasicDetail from "../../../components/inventoryDetail/BasicDetail";
import MedicineDetail from "../../../components/inventoryDetail/MedicineDetail";
import MedsupDetail from "../../../components/inventoryDetail/MedsupDetail";
import EquipmentDetail from "../../../components/inventoryDetail/EquipmentDetail";
import MeddeviceDetail from "../../../components/inventoryDetail/MeddeviceDetail";
import GeneralDetail from "../../../components/inventoryDetail/GeneralDetail";

export default function InventoryDetail() {
  const { id } = useParams();
  const router = useRouter();

  const [item, setItem] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // ‚úÖ normalize category (‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ API ‡∏™‡πà‡∏á id ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∞‡∏Å‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á)
  const normalizeCategory = (raw) => {
    if (!raw) return null;

    const map = {
      1: "general",
      2: "medicine",
      3: "medsup",
      4: "equipment",
      5: "meddevice",
      general: "general",
      medicine: "medicine",
      medsup: "medsup",
      equipment: "equipment",
      meddevice: "meddevice",
      General: "general",
      Medicine: "medicine",
      Medsup: "medsup",
      Equipment: "equipment",
      Meddevice: "meddevice",
    };

    return map[raw] || null;
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Item + lots
  useEffect(() => {
    setLoading(true);
    setError(null);

    axiosInstance
      .get(`/inventoryCheck/${id}`)
      .then((res) => {
        console.log("üìå API data:", res.data); // debug ‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        setItem(res.data);
        setLoading(false);
      })
      .catch((err) => {
        console.error("‚ùå Error fetching item:", err);
        setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
        setLoading(false);
      });
  }, [id]);

  // Render form ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ category
  const renderCategoryDetail = () => {
    if (!item) return null;

    const category = normalizeCategory(item.item_category);

    switch (category) {
      case "medicine":
        return <MedicineDetail form={item} />;
      case "medsup":
        return <MedsupDetail form={item} />;
      case "equipment":
        return <EquipmentDetail form={item} />;
      case "meddevice":
        return <MeddeviceDetail form={item} />;
      case "general":
        return <GeneralDetail form={item} />;
      default:
        return null;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î
  const handleDamaged = (lot) => {
    Swal.fire({
      title: `‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î (Lot ${lot.lot_no})`,
      html:
        `<label for="swal-input1" class="swal2-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∏‡∏î:</label>` +
        `<input id="swal-input1" class="swal2-input" type="number" min="1" max="${lot.remaining_qty}" value="1">` +
        `<label for="swal-input2" class="swal2-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</label>` +
        `<select id="swal-input2" class="swal2-select">
¬† ¬† ¬† ¬† <option value="damaged">‡∏ä‡∏≥‡∏£‡∏∏‡∏î</option>
¬† ¬† ¬† ¬† <option value="lost">‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢</option>
¬† ¬† ¬†</select>` +
        `<label for="swal-input3" class="swal2-label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</label>` +
        `<textarea id="swal-input3" class="swal2-textarea" placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"></textarea>`,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      preConfirm: () => {
        const qty = document.getElementById("swal-input1").value;
        const type = document.getElementById("swal-input2").value;
        const note = document.getElementById("swal-input3").value;

        if (!qty || qty <= 0 || qty > lot.remaining_qty) {
          Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
          return false;
        }

        return { qty, type, note };
      },
    }).then(async (result) => {
      if (result.isConfirmed) {
        const { qty, type, note } = result.value;
        try {
          await axiosInstance.post(`/damaged`, {
            lot_id: lot.lot_id,
            item_id: lot.item_id,
            qty: parseInt(qty, 10),
            damaged_type: type,
            note: note,
            reported_by: 999, // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö Authentication ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ user id ‡∏à‡∏£‡∏¥‡∏á‡πÜ
          });

          Swal.fire("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß", "success");

          // Reload ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ lot ‡πÉ‡∏´‡∏°‡πà
          const res = await axiosInstance.get(`/inventoryCheck/${lot.item_id}`);
          setItem(res.data);
        } catch (err) {
          console.error(err);
          Swal.fire("‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î‡πÑ‡∏î‡πâ", "error");
        }
      }
    });
  };

  if (loading) return <p className={styles.loading}>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏...</p>;

  if (error) return <p className={styles.error}>‚ùó {error}</p>;

  if (!item) return <p className={styles.noData}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏</p>;

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>üì¶ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</h1>

      {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏±‡∏™‡∏î‡∏∏ */}
      <div className={styles.categoryBox}>
        <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong>{" "}
        {(() => {
          const mapTH = {
            general: "‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
            medicine: "‡∏¢‡∏≤",
            medsup: "‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏á",
            equipment: "‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå",
            meddevice: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå",
          };
          const category = normalizeCategory(item.item_category);
          return mapTH[category] || item.item_category || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó";
        })()}
      </div>

      <BasicDetail form={item} />

      {renderCategoryDetail()}

      {/* ‚úÖ Section ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Lot */}
      <div className={styles.lotSection}>
        <h2 className={styles.subTitle}>üìë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Lot</h2>
        <table className={styles.lotTable}>
          <thead>
            <tr>
              <th>Lot No</th>
              <th>‡∏ú‡∏•‡∏¥‡∏ï</th>
              <th>‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</th>
              <th>‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤</th>
              <th>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
              <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {item.lots && item.lots.length > 0 ? (
              item.lots.map((lot) => (
                <tr key={lot.lot_id}>
                  <td>{lot.lot_no}</td>
                  <td>{lot.mfg_date}</td>
                  <td>{lot.exp_date}</td>
                  <td>{lot.import_date}</td>
                  <td>{lot.remaining_qty}</td>
                  <td>{lot.status}</td>
                  <td>
                    <button
                      className={styles.damagedButton}
                      onClick={() => handleDamaged(lot)}
                    >
                      ‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="7">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Lot</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö */}
      <div className={styles.buttonContainer}>
        <button className={styles.backButton} onClick={() => router.back()}>
          ‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö
        </button>
      </div>
    </div>
  );
}
