'use client'; // ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Client Components ‡πÉ‡∏ô Next.js

import { useState, useEffect } from 'react'; // import hooks ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import { useRouter } from 'next/navigation'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÉ‡∏ô Next.js App Router
import Swal from 'sweetalert2'; 

import axiosInstance from '@/app/utils/axiosInstance'; 
import styles from './page.module.css'; 

// Map ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏µ class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö styling
const statusMap = {
  approved_all: { text: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', class: styles.statusApproved },
  approved_partial: { text: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô', class: styles.statusPartial },
  stock_deducted: { text: '‡πÄ‡∏ö‡∏¥‡∏Å-‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß', class: styles.statusDeducted },
  completed: { text: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', class: styles.statusCompleted },
  pending_deduction: { text: '‡∏£‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å-‡∏à‡πà‡∏≤‡∏¢', class: styles.statusPendingDeduction },
};

// Map ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠ (request_type) ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
const typeMap = {
  'borrow': '‡∏¢‡∏∑‡∏°',
  'withdraw': '‡πÄ‡∏ö‡∏¥‡∏Å',
  'transfer': '‡πÇ‡∏≠‡∏ô',
};

// **‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞**
const getStatusTranslation = (status) => {
  if (statusMap[status]) {
    return statusMap[status];
  }
  return {
    text: status.charAt(0).toUpperCase() + status.slice(1).replace(/_/g, ' '),
    class: styles.statusDefault || styles.statusPending,
  };
};

// **‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠**
const getTypeTranslation = (type) => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô typeMap ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (typeMap[type]) {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    return typeMap[type];
  }
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏ä‡πà‡∏ô‡∏ñ‡πâ‡∏≤ Backend ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏°‡∏≤)
  return type;
};

export default function StockDeductionPage() {
  const router = useRouter(); 

  const [requests, setRequests] = useState([]); 
  const [isLoading, setIsLoading] = useState(true); 
  const [error, setError] = useState(null); 
  const [currentPage, setCurrentPage] = useState(1); 
  const itemsPerPage = 12; 

  useEffect(() => {
    const fetchRequestsForStockDeduction = async () => {
      try {
        setIsLoading(true); 
        setError(null); 

        const response = await axiosInstance.get('/stockDeduction/ready');
        const data = response.data;

        setRequests(data); 
      } catch (err) {
        console.error("Error fetching requests ready for stock deduction:", err);
        setError(err.response?.data?.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ö‡∏¥‡∏Å-‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"); 
      } finally {
        setIsLoading(false); 
      }
    };

    fetchRequestsForStockDeduction(); 
  }, []); 

  const totalPages = Math.ceil(requests.length / itemsPerPage);
  const currentItems = requests.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handleDeductStockClick = (requestId) => {
    router.push(`/manage/stockDeduction/${requestId}`);
  };

  const tableColSpan = 8; 

  return (
    <div className={styles.pageBackground}>
      <div className={styles.container}>
        <h1 className={styles.title}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å-‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏ï‡πá‡∏≠‡∏Å</h1>

        {isLoading && <p className={styles.infoMessage}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠...</p>}
        {error && <p className={styles.errorMessage}>{error}</p>}

        {!isLoading && !error && (
          <>
            <table className={styles.table}>
              <thead>
                <tr>
                  <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                  <th>‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏Ç‡∏≠</th>
                  <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠</th>
                  <th>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠</th>
                  <th>‡πÅ‡∏ú‡∏ô‡∏Å</th>
                  <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {currentItems.length > 0 ? (
                  currentItems.map((item, index) => {
                    const translatedStatus = getStatusTranslation(item.status);
                    const translatedType = getTypeTranslation(item.type); // **‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó**
                    return (
                      <tr key={item.request_id || item.request_code}>
                        <td>{(currentPage - 1) * itemsPerPage + index + 1}</td>
                        <td>{item.request_code}</td>
                        <td>{new Date(item.request_date).toLocaleDateString('th-TH')}</td>
                        <td>{item.requester}</td>
                        <td>{item.department}</td>
                        <td>
                          {/* **‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡πâ‡∏ß** */}
                          {translatedType}
                        </td>
                        <td>
                          <span className={`${styles.statusBadge} ${translatedStatus.class}`}>
                            {translatedStatus.text}
                          </span>
                        </td>
                        <td>
                          <button
                            className={`${styles.button} ${styles.primaryButton}`}
                            onClick={() => handleDeductStockClick(item.request_id)}
                          >
                            üì¶ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å-‡∏à‡πà‡∏≤‡∏¢
                          </button>
                        </td>
                      </tr>
                    );
                  })
                ) : (
                  <tr>
                    <td colSpan={tableColSpan} className={styles.infoMessage}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å-‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</td>
                  </tr>
                )}
                {Array.from({ length: itemsPerPage - currentItems.length }).map((_, index) => (
                  <tr key={`placeholder-${index}`}>
                    <td colSpan={tableColSpan} className={styles.placeholderRow}>&nbsp;</td>
                  </tr>
                ))}
              </tbody>
            </table>

            <div className={styles.pagination}>
              <button
                className={styles.pageButton}
                disabled={currentPage === 1}
                onClick={() => setCurrentPage((prev) => prev - 1)}
              >
                ‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
              </button>
              <span>‡∏´‡∏ô‡πâ‡∏≤ {currentPage} / {totalPages}</span>
              <button
                className={styles.pageButton}
                disabled={currentPage === totalPages}
                onClick={() => setCurrentPage((prev) => prev + 1)}
              >
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°Ô∏è
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
}