'use client';

import { useEffect, useState, useMemo } from 'react';
import { useParams, useRouter } from 'next/navigation';
import axiosInstance from '../../../utils/axiosInstance';
import Swal from 'sweetalert2';
import Image from 'next/image';
import styles from './page.module.css';
import { FaSave, FaTimesCircle, FaThumbsDown } from 'react-icons/fa'; // ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô

// ‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
function ItemImage({ item_img, alt }) {
  const defaultImg = "http://localhost:5000/public/defaults/landscape.png";
  const [imgSrc, setImgSrc] = useState(
    item_img && typeof item_img === "string" && item_img.trim() !== ""
      ? `http://localhost:5000/uploads/${item_img}`
      : defaultImg
  );

  return (
    <Image
      src={imgSrc}
      alt={alt || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û"}
      width={40}
      height={40}
      style={{ objectFit: "cover", borderRadius: 8 }}
      onError={() => setImgSrc(defaultImg)}
    />
  );
}

export default function ApprovalRequestPage() {
  const { request_id } = useParams();
  const router = useRouter();

  const [request, setRequest] = useState(null);
  const [details, setDetails] = useState([]);
  const [draftDetails, setDraftDetails] = useState({});
  const [itemErrors, setItemErrors] = useState({});
  const [tooltip, setTooltip] = useState({});
  const [loading, setLoading] = useState(true);

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 8;

  const statusMap = {
    waiting_approval_detail: '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
    approved: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
    rejected: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß',
    waiting_approval: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
    approved_all: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    rejected_all: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    approved_partial: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô',
    rejected_partial: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô',
    approved_partial_and_rejected_partial: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô',
    preparing: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°',
    delivering: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏™‡πà‡∏á',
    completed: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
    canceled: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠',
    approved_in_queue: '‡∏£‡∏≠‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
  };

  const disabledOverallStatuses = [
    "preparing","delivering","completed","canceled",
    "approved_all","rejected_all","approved_partial",
    "rejected_partial","approved_partial_and_rejected_partial"
  ];

  useEffect(() => {
    if (typeof window !== 'undefined' && !localStorage.getItem('user_id')) {
      localStorage.setItem('user_id', '999');
      localStorage.setItem('user_fname', '‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á');
      localStorage.setItem('user_lname', '‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥');
    }
  }, []);

  useEffect(() => { if (request_id) fetchRequestDetail(); }, [request_id]);

  const fetchRequestDetail = async () => {
    setLoading(true);
    try {
      const res = await axiosInstance.get(`/approval/${request_id}`);
      setRequest(res.data.request);
      setDetails(res.data.details);

      const initialDraft = {};
      res.data.details.forEach(d => {
        initialDraft[d.request_detail_id] = {
          status: d.approval_status,
          approved_qty:
            d.approved_qty !== null && d.approved_qty !== undefined
              ? d.approved_qty
              : (d.approval_status === 'rejected' ? 0 : d.requested_qty),
          reason: d.approval_note
        };
      });
      setDraftDetails(initialDraft);
      setItemErrors({});
      setTooltip({});
      setCurrentPage(1);
    } catch (err) {
      console.error(err);
      Swal.fire('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î','‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ','error');
    } finally {
      setLoading(false);
    }
  };

  const updateDraft = (id, newStatus, newApprovedQty, reason='') => {
    setDraftDetails(prev => ({
      ...prev,
      [id]: {
        status: newStatus,
        approved_qty: newApprovedQty,
        reason: newStatus === 'rejected' ? (reason || null) : null
      }
    }));
    setItemErrors(prev => ({ ...prev, [id]: '' }));
    setTooltip(prev => ({ ...prev, [id]: { show:false, message:'' } }));
  };

  const handleApproveOne = (d) =>
    updateDraft(d.request_detail_id, 'approved', d.requested_qty);

  const handleRejectOne = async (d) => {
    const { value: reason } = await Swal.fire({
      title: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ',
      input: 'textarea',
      inputLabel: '‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•',
      inputPlaceholder: '‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏´‡∏°‡∏î, ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°',
      showCancelButton: true,
      confirmButtonText: '‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    });
    if (reason === undefined) return;
    updateDraft(d.request_detail_id, 'rejected', 0, reason);
  };

  const handleApprovedQtyChange = (id, value, requestedQty) => {
    let errorMsg = '';
    let finalQty = null;

    const current = draftDetails[id];
    if (current?.status === 'rejected') {
      setDraftDetails(p => ({ ...p, [id]: { ...p[id], approved_qty: 0 } }));
      return;
    }

    if (value === '') {
      finalQty = '';
    } else {
      const n = parseInt(value, 10);
      if (isNaN(n) || n < 0) { errorMsg = '‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö'; finalQty = 0; }
      else if (n > requestedQty) { errorMsg = `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${requestedQty}`; finalQty = requestedQty; }
      else { finalQty = n; }
    }

    setItemErrors(prev => ({ ...prev, [id]: errorMsg }));
    setTooltip(prev => ({ ...prev, [id]: { show: !!errorMsg, message: errorMsg }}));

    setDraftDetails(prev => ({ ...prev, [id]: { ...(prev[id]||{}), approved_qty: finalQty }}));
  };

  const handleSaveDraft = async () => {
    if (request && disabledOverallStatuses.includes(request.request_status)) {
      Swal.fire('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ','‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß','warning');
      return;
    }

    if (Object.values(itemErrors).some(e => e)) {
      Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î','‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å','error');
      return;
    }

    const changesToSave = Object.keys(draftDetails)
      .map(idStr => {
        const id = parseInt(idStr, 10);
        const original = details.find(d => d.request_detail_id === id);
        const draft = draftDetails[idStr];
        if (!original) return null;

        const approvedQty =
          draft.approved_qty === '' ? 0 :
          (isNaN(parseInt(draft.approved_qty,10)) ? 0 : parseInt(draft.approved_qty,10));

        if (approvedQty === 0 && draft.status !== 'rejected') {
          setItemErrors(prev => ({ ...prev, [idStr]:'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏´‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò' }));
          setTooltip(prev => ({ ...prev, [idStr]: { show:true, message:'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏´‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò' } }));
          return null;
        }
        if (draft.status === 'rejected' && approvedQty !== 0) {
          setItemErrors(prev => ({ ...prev, [idStr]:'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò' }));
          setTooltip(prev => ({ ...prev, [idStr]: { show:true, message:'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò' } }));
          return null;
        }

        return {
          request_detail_id: id,
          status: draft.status,
          approved_qty: approvedQty,
          note: draft.reason || null,
          old_status: original.approval_status,
        };
      })
      .filter(Boolean)
      .filter(u => {
        const orig = details.find(d => d.request_detail_id === u.request_detail_id);
        return (
          u.status !== orig.approval_status ||
          u.approved_qty !== orig.approved_qty ||
          (u.status === 'rejected' && u.note !== orig.approval_note)
        );
      });

    if (!changesToSave.length) {
      Swal.fire('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á','‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å','info');
      return;
    }

    const ok = await Swal.fire({
      title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
      text: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    });
    if (!ok.isConfirmed) return;

    setLoading(true);
    try {
      const userId = parseInt(localStorage.getItem('user_id'), 10);
      await axiosInstance.put(`/approval/${request_id}/bulk-update`, { updates: changesToSave, userId });
      Swal.fire('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à','‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß','success');
      await fetchRequestDetail();
    } catch (err) {
      console.error(err);
      const msg = err.response?.data?.message || err.response?.data?.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ';
      Swal.fire('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', msg, 'error');
    } finally {
      setLoading(false);
    }
  };

  // ‚¨ÖÔ∏è ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const handleRejectAll = async () => {
    if (isOverallDisabled) {
      Swal.fire('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ', '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß', 'warning');
      return;
    }
    const { value: reason } = await Swal.fire({
      title: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
      input: 'textarea',
      inputLabel: '‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• (‡∏à‡∏∞‡πÅ‡∏ô‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)',
      inputPlaceholder: '‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏´‡∏°‡∏î, ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å',
      showCancelButton: true,
      confirmButtonText: '‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
    });
    if (reason === undefined) return;

    setDraftDetails((prev) => {
      const next = { ...prev };
      details.forEach((d) => {
        next[d.request_detail_id] = {
          ...(next[d.request_detail_id] || {
            status: d.approval_status,
            approved_qty:
              d.approved_qty ?? (d.approval_status === 'rejected' ? 0 : d.requested_qty),
            reason: d.approval_note,
          }),
          status: 'rejected',
          approved_qty: 0,
          reason,
        };
      });
      return next;
    });
    setItemErrors({});
    setTooltip({});
  };

  const indexOfLast = currentPage * itemsPerPage;
  const indexOfFirst = indexOfLast - itemsPerPage;
  const currentItems = details.slice(indexOfFirst, indexOfLast);
  const totalPages = Math.ceil(details.length / itemsPerPage);

  const summary = useMemo(() => {
    const c = { totalItems: 0, approvedCount: 0, rejectedCount: 0, pendingCount: 0 };
    details.forEach(d => {
      const st = draftDetails[d.request_detail_id]?.status || d.approval_status;
      c.totalItems += d.requested_qty;
      if (st === 'approved') c.approvedCount += 1;
      else if (st === 'rejected') c.rejectedCount += 1;
      else c.pendingCount += 1;
    });
    return c;
  }, [details, draftDetails]);

  const isOverallDisabled = request && disabledOverallStatuses.includes(request.request_status);

  const pillClassByStatus = (s) => {
    if (s === 'approved') return `${styles.badge} ${styles.badgeGreen}`;
    if (s === 'rejected') return `${styles.badge} ${styles.badgeRed}`;
    return `${styles.badge} ${styles.badgeYellow}`;
  };

  if (loading) return <p className={styles.loading}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;
  if (!request) return <p className={styles.error}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠</p>;

  return (
    <div className={styles.pageBackground}>
      <div className={styles.container}>
        <h2 className={styles.title}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠: {request.request_code}</h2>

        <div className={styles.infoGrid}>
          <div className={styles.infoLeft}>
            <div><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠:</strong> {new Date(request.request_date).toLocaleDateString('th-TH')}</div>
            <div><strong>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á:</strong> {request.request_due_date ? new Date(request.request_due_date).toLocaleDateString('th-TH') : '-'}</div>
            <div><strong>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</strong> {request.user_name} ({request.department})</div>
            <div><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠:</strong> {request.request_type === 'borrow' ? '‡∏¢‡∏∑‡∏°' : '‡πÄ‡∏ö‡∏¥‡∏Å'}</div>
            <div><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> <span className={styles.status}>{statusMap[request.request_status]}</span></div>
            <div><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:</strong> {request.is_urgent ? '‡∏î‡πà‡∏ß‡∏ô' : '‡∏õ‡∏Å‡∏ï‡∏¥'}</div>
            <div className={styles.summary}>
              ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {details.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ({summary.totalItems} ‡∏ä‡∏¥‡πâ‡∏ô) | ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: {summary.approvedCount} | ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: {summary.rejectedCount} | ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: {summary.pendingCount}
            </div>
          </div>
          <div className={styles.noteBox}>
            <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong>
            <div>{request.request_note || '-'}</div>
          </div>
        </div>

        <h3 className={styles.subtitle}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≠</h3>

        <div className={styles.tableContainer}>
          <table className={styles.table}>
            {/* ‡∏à‡∏±‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏Ç‡∏ô‡∏≤‡∏ô‡∏Å‡∏±‡∏ô */}
            <colgroup>
              <col style={{ width: '70px' }} />    {/* ‡∏•‡∏≥‡∏î‡∏±‡∏ö */}
              <col style={{ width: '72px' }} />    {/* ‡∏£‡∏π‡∏õ */}
              <col style={{ width: 'auto' }} />    {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏™‡∏î‡∏∏ */}
              <col style={{ width: '130px' }} />   {/* ‡∏Ç‡∏≠ */}
              <col style={{ width: '110px' }} />   {/* ‡∏´‡∏ô‡πà‡∏ß‡∏¢ */}
              <col style={{ width: '150px' }} />   {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
              <col style={{ width: '160px' }} />   {/* ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ */}
              <col style={{ width: '220px' }} />   {/* ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ */}
            </colgroup>

            <thead className={styles.tableHead}>
              <tr>
                <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                <th>‡∏£‡∏π‡∏õ</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏™‡∏î‡∏∏</th>
                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠</th>
                <th>‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
                <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>

            <tbody>
              {currentItems.map((d, i) => {
                const draft = draftDetails[d.request_detail_id] || {
                  status: d.approval_status,
                  approved_qty: d.approved_qty,
                  reason: d.approval_note
                };

                const st = draft?.status;
                const statusText = statusMap[st] || st;
                const displayApprovedQty =
                  draft?.approved_qty !== undefined
                    ? String(draft.approved_qty)
                    : (d.approved_qty ?? '') + '';

                const qtyDisabled = isOverallDisabled || st === 'rejected';
                const btnDisabled = isOverallDisabled;

                return (
                  <tr key={d.request_detail_id}>
                    <td data-label="‡∏•‡∏≥‡∏î‡∏±‡∏ö">{(currentPage - 1) * itemsPerPage + i + 1}</td>
                    <td data-label="‡∏£‡∏π‡∏õ"><ItemImage item_img={d.item_img} alt={d.item_name} /></td>
                    <td data-label="‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏™‡∏î‡∏∏" title={d.item_name}>{d.item_name}</td>
                    <td data-label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠">{d.requested_qty}</td>
                    <td data-label="‡∏´‡∏ô‡πà‡∏ß‡∏¢">{d.item_unit}</td>

                    {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô pill ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô */}
                    <td data-label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞">
                      <span className={pillClassByStatus(st)}>{statusText}</span>
                    </td>

                    <td data-label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥">
                      <div
                        className={styles.tooltipContainer}
                        onMouseOver={() => tooltip?.[d.request_detail_id]?.message &&
                          setTooltip(prev => ({ ...prev, [d.request_detail_id]: { ...prev?.[d.request_detail_id], show: true } }))}
                        onMouseOut={() => setTooltip(prev => ({ ...prev, [d.request_detail_id]: { ...prev?.[d.request_detail_id], show: false } }))}
                        onFocus={() => tooltip?.[d.request_detail_id]?.message &&
                          setTooltip(prev => ({ ...prev, [d.request_detail_id]: { ...prev?.[d.request_detail_id], show: true } }))}
                        onBlur={() => setTooltip(prev => ({ ...prev, [d.request_detail_id]: { ...prev?.[d.request_detail_id], show: false } }))}
                      >
                        <input
                          type="number"
                          value={displayApprovedQty}
                          onChange={(e) => handleApprovedQtyChange(d.request_detail_id, e.target.value, d.requested_qty)}
                          min="0"
                          max={d.requested_qty}
                          className={`${styles.approvedQtyInput} ${itemErrors?.[d.request_detail_id] ? styles.inputErrorBorder : ''}`}
                          disabled={qtyDisabled}
                        />
                        {(itemErrors?.[d.request_detail_id] || tooltip?.[d.request_detail_id]?.show) && tooltip?.[d.request_detail_id]?.message && (
                          <div className={styles.tooltip}>{tooltip?.[d.request_detail_id]?.message}</div>
                        )}
                      </div>
                    </td>

                    <td data-label="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£" className={styles.actionsCell}>
  <div className={styles.actionBtnGroup}>
    {btnDisabled ? (
      <>
        <button disabled className={`${styles.actionButton} ${styles.disabled}`}>‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</button>
        <button disabled className={`${styles.actionButton} ${styles.disabled}`}>‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</button>
      </>
    ) : (
      <>
        <button onClick={() => handleApproveOne(d)} className={`${styles.actionButton} ${styles.approve}`}>‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</button>
        <button onClick={() => handleRejectOne(d)} className={`${styles.actionButton} ${styles.reject}`}>‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</button>
      </>
    )}
  </div>
</td>
                  </tr>
                );
              })}

              {Array.from({ length: itemsPerPage - currentItems.length }).map((_, idx) => (
                <tr key={`empty-${idx}`} className={styles.emptyRow}>
                  <td colSpan={8}>&nbsp;</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className={styles.actions}>
          <button
            className={styles.saveButton}
            onClick={handleSaveDraft}
            disabled={
              Object.keys(draftDetails).length === 0 ||
              isOverallDisabled ||
              loading ||
              Object.values(itemErrors).some(Boolean)
            }
          >
            <FaSave className={styles.btnIcon} aria-hidden="true" />
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>

          <button className={styles.cancelButton} onClick={() => router.push('/manage/requestList')}>
            <FaTimesCircle className={styles.btnIcon} aria-hidden="true" />
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
        </div>
      </div>
    </div>
  );
}