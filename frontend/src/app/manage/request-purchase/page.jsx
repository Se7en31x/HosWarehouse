'use client';
import { useState, useEffect, useMemo } from "react";
import styles from "./page.module.css";
import axiosInstance from "@/app/utils/axiosInstance";
import { FaPlus, FaTrashAlt, FaSearch, FaShoppingCart } from "react-icons/fa";
import Swal from "sweetalert2";
import withReactContent from "sweetalert2-react-content";
import { ChevronLeft, ChevronRight } from "lucide-react";

// ‚úÖ Import Socket functions
import { connectSocket, disconnectSocket } from "@/app/utils/socket";

const MySwal = withReactContent(Swal);

const mapCategoryToThai = (category) => {
  switch ((category || "").toLowerCase()) {
    case "medicine":
      return "‡∏¢‡∏≤";
    case "medsup":
      return "‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå";
    case "equipment":
      return "‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå";
    case "meddevice":
      return "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå";
    case "general":
      return "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ";
    default:
      return "-";
  }
};

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getImageUrl ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
const getImageUrl = (imgName) => {
  if (!imgName) {
    return "/public/defaults/landscape.png";
  }
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡πÄ‡∏ï‡πá‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
  if (String(imgName).startsWith("http")) {
    return imgName;
  }
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ relative path
  return `/uploads/${imgName}`;
};

export default function RequestPurchasePage() {
  const [items, setItems] = useState([]);
  const [selectedItems, setSelectedItems] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const ITEMS_PER_PAGE = 10;

  const fetchData = async () => {
    setLoading(true);
    try {
      const itemsRes = await axiosInstance.get("/pr/items");
      setItems(Array.isArray(itemsRes.data) ? itemsRes.data.filter(Boolean) : []);
    } catch (err) {
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: " + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    let isMounted = true;
    const socket = connectSocket();

    socket.on("itemAdded", (newItem) => {
      console.log("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Socket.IO:", newItem);
      if (isMounted) {
        setItems(prevItems => [...prevItems, newItem]);
      }
    });

    socket.on("itemLotUpdated", (payload) => {
      console.log("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Lot ‡∏à‡∏≤‡∏Å Socket.IO:", payload);
      if (isMounted) {
        setItems(prevItems => prevItems.map(item =>
          item.item_id === payload.item_id
            ? {
              ...item,
              current_stock: payload.new_total_qty
            }
            : item
        ));
      }
    });

    socket.on("itemDeleted", (deletedItemId) => {
      console.log("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Socket.IO:", deletedItemId);
      if (isMounted) {
        setItems(prevItems => prevItems.filter(item =>
          item.item_id !== deletedItemId
        ));
      }
    });

    return () => {
      isMounted = false;
      socket.off("itemAdded");
      socket.off("itemLotUpdated");
      socket.off("itemDeleted");
      disconnectSocket();
    };
  }, []);

  const filteredItems = useMemo(() => {
    const q = searchQuery.toLowerCase();
    return items.filter(
      (item) =>
        (item.item_name || "").toLowerCase().includes(q) ||
        (item.item_purchase_unit || "").toLowerCase().includes(q)
    );
  }, [items, searchQuery]);

  const totalPages = Math.max(1, Math.ceil(filteredItems.length / ITEMS_PER_PAGE));
  const paginatedItems = useMemo(() => {
    const start = (currentPage - 1) * ITEMS_PER_PAGE;
    return filteredItems.slice(start, start + ITEMS_PER_PAGE);
  }, [filteredItems, currentPage]);

  const getPageNumbers = () => {
    const pages = [];
    if (totalPages <= 7) {
      for (let i = 1; i <= totalPages; i++) pages.push(i);
    } else if (currentPage <= 4) {
      pages.push(1, 2, 3, 4, 5, "...", totalPages);
    } else if (currentPage >= totalPages - 3) {
      pages.push(1, "...", totalPages - 4, totalPages - 3, totalPages - 2, totalPages - 1, totalPages);
    } else {
      pages.push(1, "...", currentPage - 1, currentPage, currentPage + 1, "...", totalPages);
    }
    return pages;
  };

  const handleAddItem = (item) => {
    if (selectedItems.some((i) => i.item_id === item.item_id)) {
      Swal.fire({
        title: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
        text: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß",
        icon: "warning",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        customClass: { confirmButton: styles.swalButton },
      });
      return;
    }

    Swal.fire({
      title: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${item.item_name} ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤`,
      text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
      input: "number",
      inputAttributes: {
        min: 1,
        step: 1,
      },
      inputValue: 1,
      showCancelButton: true,
      confirmButtonText: "‡πÄ‡∏û‡∏¥‡πà‡∏°",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      customClass: {
        confirmButton: styles.swalButton,
        cancelButton: styles.swalCancelButton,
      },
      inputValidator: (value) => {
        if (!value || isNaN(value) || Number(value) < 1) {
          return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0";
        }
      },
    }).then((result) => {
      if (result.isConfirmed) {
        const quantity = Number(result.value);
        setSelectedItems((prev) => [
          ...prev,
          { ...item, requested_qty: quantity, note: "" },
        ]);
      }
    });
  };

  const handleRemoveItem = (id, itemName) => {
    MySwal.fire({
      title: `‡∏•‡∏ö ${itemName} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤?`,
      text: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡∏•‡∏ö",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      customClass: {
        confirmButton: styles.swalButton,
        cancelButton: styles.swalCancelButton,
      },
    }).then((result) => {
      if (result.isConfirmed) {
        setSelectedItems((prev) => prev.filter((i) => i.item_id !== id));
        MySwal.fire({
          title: "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          text: `${itemName} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß`,
          icon: "success",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          customClass: { confirmButton: styles.swalButton },
        });
      }
    });
  };

  const showCartPopup = () => {
    MySwal.fire({
      title: `‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (${selectedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`,
      html: (
        <div className="cart-container">
          {selectedItems.length ? (
            selectedItems.map((item) => (
              <div key={item.item_id} className="cart-item">
                <div className="item-details">
                  <h3 className="item-name">{item.item_name || "-"}</h3>
                  <span className="item-meta">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {mapCategoryToThai(item.item_category)}</span>
                  <span className="item-meta">‡∏´‡∏ô‡πà‡∏ß‡∏¢: {item.item_purchase_unit || item.item_unit || "-"}</span>
                </div>
                <div className="input-group">
                  <label className="input-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</label>
                  <input
                    type="number"
                    min="1"
                    defaultValue={item.requested_qty}
                    className="input-field"
                    data-id={item.item_id}
                    data-field="qty"
                  />
                </div>
                <div className="input-group">
                  <label className="input-label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
                  <input
                    type="text"
                    defaultValue={item.note}
                    placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"
                    className="input-field"
                    data-id={item.item_id}
                    data-field="note"
                  />
                </div>
                <div></div>
                <button
                  className="remove-btn"
                  onClick={() => {
                    MySwal.close();
                    handleRemoveItem(item.item_id, item.item_name);
                  }}
                >
                  <FaTrashAlt size={14} />
                </button>
              </div>
            ))
          ) : (
            <div className="no-items">
              <span role="img" aria-label="Empty cart">üõí</span> ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
            </div>
          )}
        </div>
      ),
      showCloseButton: true,
      showCancelButton: true,
      showConfirmButton: true,
      confirmButtonText: "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
      cancelButtonText: "‡∏õ‡∏¥‡∏î",
      customClass: {
        container: styles.swalContainer,
        popup: styles.swalPopup,
        confirmButton: styles.swalButton,
        cancelButton: styles.swalCancelButton,
      },
      preConfirm: () => {
        const updatedItems = selectedItems.map(item => {
          const qtyInput = document.querySelector(`input[data-id="${item.item_id}"][data-field="qty"]`);
          const noteInput = document.querySelector(`input[data-id="${item.item_id}"][data-field="note"]`);
          return {
            ...item,
            requested_qty: qtyInput ? Math.max(1, Number(qtyInput.value)) : item.requested_qty,
            note: noteInput ? noteInput.value : item.note,
          };
        });
        setSelectedItems(updatedItems);
        return updatedItems;
      }
    }).then((result) => {
      if (result.isConfirmed) {
        handleSubmit(result.value);
      }
    });
  };

  const handleSubmit = async (itemsToSubmit) => {
    if (!itemsToSubmit || !itemsToSubmit.length) {
      Swal.fire({
        title: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        icon: "warning",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        customClass: { confirmButton: styles.swalButton },
      });
      return;
    }

    try {
      await axiosInstance.post("/pr", {
        requester_id: 1,
        items_to_purchase: itemsToSubmit.map((i) => ({
          item_id: i.item_id,
          qty: i.requested_qty,
          unit: i.item_purchase_unit || i.item_unit,
          note: i.note,
        })),
      });

      Swal.fire({
        title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        text: "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        icon: "success",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        customClass: { confirmButton: styles.swalButton },
      });

      setSelectedItems([]);
    } catch (err) {
      Swal.fire({
        title: "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ: " + (err.response?.data?.message || err.message),
        icon: "error",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        customClass: { confirmButton: styles.swalButton },
      });
    }
  };

  if (loading) return <div className={styles.loading}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
  if (error) return <div className={styles.error}>{error}</div>;

  return (
    <div className={styles.mainHome}>
      <div className={styles.infoContainer}>
        <div className={styles.pageBar}>
          <h1 className={styles.pageTitle}>
            <span aria-hidden="true"></span> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          </h1>
          <button className={styles.cartButton} onClick={showCartPopup}>
            <FaShoppingCart size={16} /> ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ({selectedItems.length})
          </button>
        </div>

        <section className={styles.leftPanel}>
          <div className={styles.sectionHeader}>
            <h2 className={styles.sectionTitle}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
            <div className={styles.searchBox}>
              <FaSearch size={14} className={styles.searchIcon} aria-hidden="true" />
              <input
                type="text"
                className={styles.input}
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                aria-label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠"
              />
            </div>
          </div>

          <div className={styles.tableSection}>
            <div className={`${styles.tableGrid} ${styles.tableHeader}`}>
              <div className={styles.headerItem}>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
              <div className={styles.headerItem}>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</div>
              <div className={styles.headerItem}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</div>
              <div className={styles.headerItem}>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</div>
              <div className={styles.headerItem}>‡∏´‡∏ô‡πà‡∏ß‡∏¢</div>
              <div className={styles.headerItem}>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥</div>
              <div className={styles.headerItem}>‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</div>
              <div className={styles.headerItem}>‡πÄ‡∏û‡∏¥‡πà‡∏°</div>
            </div>

            <div className={styles.inventory} style={{ "--rows-per-page": ITEMS_PER_PAGE }}>
              {paginatedItems.length > 0 ? (
                paginatedItems.map((item) => (
                  <div key={item.item_id} className={`${styles.tableGrid} ${styles.tableRow}`}>
                    <div className={styles.tableCell}>{item.item_name}</div>
                    <div className={`${styles.tableCell} ${styles.itemCell}`}>
                      <img
                        // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
                        src={getImageUrl(item.item_img)}
                        alt={item.item_name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û"}
                        className={styles.itemImage}
                      />
                    </div>
                    <div className={styles.tableCell}>{mapCategoryToThai(item.item_category)}</div>
                    <div className={styles.tableCell}>
                      <span
                        className={
                          item.item_min && item.current_stock < item.item_min
                            ? styles.lowStock
                            : item.item_min &&
                              item.current_stock >= item.item_min &&
                              item.current_stock <= item.item_min + 10
                              ? styles.nearLowStock
                              : ""
                        }
                      >
                        {item.current_stock ?? 0}
                      </span>
                      {item.item_min && item.current_stock < item.item_min && (
                        <span className={styles.lowStockLabel}> üîª ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î</span>
                      )}
                      {item.item_min &&
                        item.current_stock >= item.item_min &&
                        item.current_stock <= item.item_min + 10 && (
                          <span className={styles.nearLowStockLabel}> ‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î</span>
                        )}
                    </div>
                    <div className={styles.tableCell}>{item.item_unit}</div>
                    <div className={styles.tableCell}>{item.item_min ?? "-"}</div>
                    <div className={styles.tableCell}>{item.item_max ?? "-"}</div>
                    <div className={styles.tableCell}>
                      <button className={styles.addBtn} onClick={() => handleAddItem(item)}>
                        <FaPlus size={10} /> ‡πÄ‡∏û‡∏¥‡πà‡∏°
                      </button>
                    </div>
                  </div>
                ))
              ) : (
                <div className={styles.noDataMessage}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
              )}
            </div>

            <ul className={styles.paginationControls}>
              <li>
                <button
                  className={styles.pageButton}
                  onClick={() => setCurrentPage((c) => Math.max(1, c - 1))}
                  disabled={currentPage === 1}
                  aria-label="‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"
                >
                  <ChevronLeft size={16} />
                </button>
              </li>
              {getPageNumbers().map((p, idx) =>
                p === "..." ? (
                  <li key={`ellipsis-${idx}`} className={styles.ellipsis}>‚Ä¶</li>
                ) : (
                  <li key={`page-${p}`}>
                    <button
                      className={`${styles.pageButton} ${p === currentPage ? styles.activePage : ""}`}
                      onClick={() => setCurrentPage(p)}
                      aria-label={`‡∏´‡∏ô‡πâ‡∏≤ ${p}`}
                      aria-current={p === currentPage ? "page" : undefined}
                    >
                      {p}
                    </button>
                  </li>
                )
              )}
              <li>
                <button
                  className={styles.pageButton}
                  onClick={() => setCurrentPage((c) => Math.min(totalPages, c + 1))}
                  disabled={currentPage === totalPages}
                  aria-label="‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
                >
                  <ChevronRight size={16} />
                </button>
              </li>
            </ul>
          </div>
        </section>
      </div>
    </div>
  );
}