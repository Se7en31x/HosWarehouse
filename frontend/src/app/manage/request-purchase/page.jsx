'use client';
import { useState, useEffect, useMemo } from "react";
import styles from "./page.module.css";
import { manageAxios } from "@/app/utils/axiosInstance";
import { FaPlus, FaTrashAlt, FaSearch, FaShoppingCart, FaMinus, FaPlus as FaPlusIcon } from "react-icons/fa";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { connectSocket, disconnectSocket } from "@/app/utils/socket";
import Swal from "sweetalert2"; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ SweetAlert2

const ImageWithFallback = ({ item }) => {
  const initialUrl = item.item_img
    ? String(item.item_img).startsWith("http")
      ? item.item_img
      : `http://localhost:5000/uploads/${item.item_img}`
    : "http://localhost:5000/public/defaults/landscape.png";
  const fallbackUrl = "http://localhost:5000/public/defaults/landscape.png";
  const [imgSrc, setImgSrc] = useState(initialUrl);

  useEffect(() => {
    setImgSrc(
      item.item_img
        ? String(item.item_img).startsWith("http")
          ? item.item_img
          : `http://localhost:5000/uploads/${item.item_img}`
        : "http://localhost:5000/public/defaults/landscape.png"
    );
  }, [item.item_img]);

  return (
    <img
      src={imgSrc}
      alt={item.item_name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û"}
      className={styles.itemImage}
      onError={() => setImgSrc(fallbackUrl)}
    />
  );
};

const mapCategoryToThai = (category) => {
  switch ((category || "").toLowerCase()) {
    case "medicine": return "‡∏¢‡∏≤";
    case "medsup": return "‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå";
    case "equipment": return "‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå";
    case "meddevice": return "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå";
    case "general": return "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ";
    default: return "-";
  }
};

const QuantityModal = ({ isOpen, onClose, item, onConfirm, showToast }) => {
  const [quantity, setQuantity] = useState(1);

  if (!isOpen || !item) return null;

  const handleConfirm = () => {
    if (quantity < 1) {
      showToast("warning", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
      return;
    }
    onConfirm(item, quantity);
    setQuantity(1); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    onClose();
  };

  const handleIncrement = () => {
    setQuantity((prev) => prev + 1);
  };

  const handleDecrement = () => {
    setQuantity((prev) => Math.max(1, prev - 1));
  };

  return (
    <div className={styles.modalOverlay}>
      <div className={styles.quantityModalContent}>
        <div className={styles.modalHeader}>
          <h2 className={styles.modalTitle}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {item.item_name}</h2>
          <button className={styles.closeButton} onClick={onClose} aria-label="‡∏õ‡∏¥‡∏î">
            ‚úï
          </button>
        </div>
        <div className={styles.quantityModalBody}>
          <div className={styles.quantityItemDetails}>
            <ImageWithFallback item={item} />
            <div className={styles.itemDetails}>
              <span className={styles.itemMeta}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {mapCategoryToThai(item.item_category)}</span>
              <span className={styles.itemMeta}>‡∏´‡∏ô‡πà‡∏ß‡∏¢: {item.item_purchase_unit || item.item_unit || "-"}</span>
              <span className={styles.itemMeta}>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {item.current_stock ?? 0}</span>
            </div>
          </div>
          <div className={styles.quantityInputGroup}>
            <label className={styles.inputLabel}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</label>
            <div className={styles.quantityInputWrapper}>
              <button
                className={styles.quantityBtn}
                onClick={handleDecrement}
                aria-label={`‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ${item.item_name}`}
              >
                <FaMinus size={12} />
              </button>
              <input
                type="number"
                min="1"
                value={quantity}
                onChange={(e) => setQuantity(Math.max(1, Number(e.target.value)))}
                className={styles.quantityInput}
                aria-label={`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ${item.item_name}`}
              />
              <button
                className={styles.quantityBtn}
                onClick={handleIncrement}
                aria-label={`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ${item.item_name}`}
              >
                <FaPlusIcon size={12} />
              </button>
            </div>
          </div>
        </div>
        <div className={styles.submitRow}>
          <button className={styles.cancelBtn} onClick={onClose} aria-label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å">
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
          <button className={styles.submitBtn} onClick={handleConfirm} aria-label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô">
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
          </button>
        </div>
      </div>
    </div>
  );
};

const CartModal = ({ isOpen, onClose, selectedItems, setSelectedItems, handleSubmit, showToast }) => {
  const [localItems, setLocalItems] = useState(selectedItems);

  useEffect(() => {
    setLocalItems(selectedItems);
  }, [selectedItems]);

  const handleQuantityChange = (itemId, value) => {
    setLocalItems((prev) =>
      prev.map((item) =>
        item.item_id === itemId ? { ...item, requested_qty: Math.max(1, Number(value)) } : item
      )
    );
  };

  const handleNoteChange = (itemId, value) => {
    setLocalItems((prev) =>
      prev.map((item) => (item.item_id === itemId ? { ...item, note: value } : item))
    );
  };

  const handleRemoveItem = (itemId, itemName) => {
    setSelectedItems((prev) => prev.filter((i) => i.item_id !== itemId));
    showToast("success", `${itemName} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤`);
  };

  const handleConfirm = () => {
    setSelectedItems(localItems);
    handleSubmit(localItems);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay}>
      <div className={styles.modalContent}>
        <div className={styles.modalHeader}>
          <h2 className={styles.modalTitle}>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({selectedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</h2>
          <button className={styles.closeButton} onClick={onClose} aria-label="‡∏õ‡∏¥‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤">
            ‚úï
          </button>
        </div>
        <div className={styles.cartList}>
          {selectedItems.length ? (
            selectedItems.map((item) => (
              <div key={item.item_id} className={styles.cartItem}>
                <div className={styles.itemDetails}>
                  <h3 className={styles.itemName}>{item.item_name || "-"}</h3>
                  <span className={styles.itemMeta}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {mapCategoryToThai(item.item_category)}</span>
                  <span className={styles.itemMeta}>‡∏´‡∏ô‡πà‡∏ß‡∏¢: {item.item_purchase_unit || item.item_unit || "-"}</span>
                </div>
                <div className={styles.inputGroup}>
                  <label className={styles.inputLabel}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</label>
                  <input
                    type="number"
                    min="1"
                    value={localItems.find((i) => i.item_id === item.item_id)?.requested_qty || 1}
                    onChange={(e) => handleQuantityChange(item.item_id, e.target.value)}
                    className={styles.inputField}
                    aria-label={`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ${item.item_name}`}
                  />
                </div>
                <div className={styles.inputGroup}>
                  <label className={styles.inputLabel}>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</label>
                  <input
                    type="text"
                    value={localItems.find((i) => i.item_id === item.item_id)?.note || ""}
                    onChange={(e) => handleNoteChange(item.item_id, e.target.value)}
                    placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"
                    className={styles.inputField}
                    aria-label={`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${item.item_name}`}
                  />
                </div>
                <button
                  className={styles.removeBtn}
                  onClick={() => handleRemoveItem(item.item_id, item.item_name)}
                  aria-label={`‡∏•‡∏ö ${item.item_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤`}
                >
                  <FaTrashAlt size={14} />
                </button>
              </div>
            ))
          ) : (
            <div className={styles.noItems}>
              <span role="img" aria-label="‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤">üõí</span> ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
            </div>
          )}
        </div>
        {selectedItems.length > 0 && (
          <div className={styles.submitRow}>
            <button className={styles.cancelBtn} onClick={onClose} aria-label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å">
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
            <button className={styles.submitBtn} onClick={handleConfirm} aria-label="‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠">
              ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

const Toast = ({ toasts, removeToast }) => {
  return (
    <div className={styles.toastContainer}>
      {toasts.map((toast) => (
        <div key={toast.id} className={`${styles.toast} ${styles[toast.type]}`}>
          {toast.type === "success" && <span aria-hidden="true">‚úÖ</span>}
          {toast.type === "warning" && <span aria-hidden="true">‚ö†Ô∏è</span>}
          {toast.type === "error" && <span aria-hidden="true">‚ùå</span>}
          <span>{toast.message}</span>
        </div>
      ))}
    </div>
  );
};

export default function RequestPurchasePage() {
  const [items, setItems] = useState([]);
  const [selectedItems, setSelectedItems] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [isQuantityOpen, setIsQuantityOpen] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [toasts, setToasts] = useState([]);
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [stockFilter, setStockFilter] = useState("all");
  const ITEMS_PER_PAGE = 10;

  const showToast = (type, message) => {
    const id = Date.now();
    setToasts((prev) => [...prev, { id, type, message }]);
    setTimeout(() => {
      setToasts((prev) => prev.filter((toast) => toast.id !== id));
    }, 3000);
  };

  const fetchData = async () => {
    setLoading(true);
    try {
      const itemsRes = await manageAxios.get("/pr/items");
      setItems(Array.isArray(itemsRes.data) ? itemsRes.data.filter(Boolean) : []);
    } catch (err) {
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: " + (err.response?.data?.message || err.message));
      showToast("error", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    let isMounted = true;
    const socket = connectSocket();

    const handleItemUpdate = () => {
      if (isMounted) {
        console.log("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å Socket.IO ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
        fetchData();
      }
    };

    socket.on("itemAdded", handleItemUpdate);
    socket.on("itemUpdated", handleItemUpdate);
    socket.on("itemLotUpdated", handleItemUpdate);
    socket.on("itemDeleted", handleItemUpdate);

    return () => {
      isMounted = false;
      socket.off("itemAdded", handleItemUpdate);
      socket.off("itemUpdated", handleItemUpdate);
      socket.off("itemLotUpdated", handleItemUpdate);
      socket.off("itemDeleted", handleItemUpdate);
      disconnectSocket();
    };
  }, []);

  const filteredItems = useMemo(() => {
    let filtered = items.filter(
      (item) =>
        (item.item_name || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
        (item.item_purchase_unit || "").toLowerCase().includes(searchQuery.toLowerCase())
    );

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    if (categoryFilter !== "all") {
      filtered = filtered.filter((item) => item.item_category?.toLowerCase() === categoryFilter);
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å
    if (stockFilter === "low") {
      filtered = filtered.filter((item) => item.item_min && item.current_stock < item.item_min);
    } else if (stockFilter === "near-low") {
      filtered = filtered.filter(
        (item) =>
          item.item_min &&
          item.current_stock >= item.item_min &&
          item.current_stock <= item.item_min + 10
      );
    }
    return filtered;
  }, [items, searchQuery, categoryFilter, stockFilter]);

  const totalPages = Math.max(1, Math.ceil(filteredItems.length / ITEMS_PER_PAGE));
  const paginatedItems = useMemo(() => {
    const start = (currentPage - 1) * ITEMS_PER_PAGE;
    return filteredItems.slice(start, start + ITEMS_PER_PAGE);
  }, [filteredItems, currentPage]);

  const getPageNumbers = () => {
    const pages = [];
    if (totalPages <= 7) {
      for (let i = 1; i <= totalPages; i++) pages.push(i);
    } else if (currentPage <= 4) {
      pages.push(1, 2, 3, 4, 5, "...", totalPages);
    } else if (currentPage >= totalPages - 3) {
      pages.push(1, "...", totalPages - 4, totalPages - 3, totalPages - 2, totalPages - 1, totalPages);
    } else {
      pages.push(1, "...", currentPage - 1, currentPage, currentPage + 1, "...", totalPages);
    }
    return pages;
  };

  const handleAddItem = (item) => {
    if (selectedItems.some((i) => i.item_id === item.item_id)) {
      showToast("warning", `${item.item_name} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß`);
      return;
    }
    setSelectedItem(item);
    setIsQuantityOpen(true);
  };

  const handleQuantityConfirm = (item, quantity) => {
    setSelectedItems((prev) => [
      ...prev,
      { ...item, requested_qty: quantity, note: "" },
    ]);
    showToast("success", `‡πÄ‡∏û‡∏¥‡πà‡∏° ${item.item_name} ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤`);
  };

  const handleSubmit = async (itemsToSubmit) => {
    if (!itemsToSubmit || !itemsToSubmit.length) {
      Swal.fire({
        icon: "warning",
        title: "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        customClass: {
          confirmButton: styles.submitBtn,
        },
      });
      return;
    }

    try {
      await manageAxios.post("/pr", {
        requester_id: 1,
        items_to_purchase: itemsToSubmit.map((i) => ({
          item_id: i.item_id,
          qty: i.requested_qty,
          unit: i.item_purchase_unit || i.item_unit,
          note: i.note,
        })),
      });

      Swal.fire({
        icon: "success",
        title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        text: "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        customClass: {
          confirmButton: styles.submitBtn,
        },
      }).then(() => {
        setSelectedItems([]);
      });
    } catch (err) {
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ: ${err.response?.data?.message || err.message}`,
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        customClass: {
          confirmButton: styles.submitBtn,
        },
      });
    }
  };

  if (loading) return <div className={styles.loading}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
  if (error) return <div className={styles.error}>{error}</div>;

  return (
    <div className={styles.mainHome}>
      <div className={styles.infoContainer}>
        <div className={styles.pageBar}>
          <h1 className={styles.pageTitle}>
            <span aria-hidden="true"></span> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          </h1>
          <button className={styles.cartButton} onClick={() => setIsCartOpen(true)} aria-label="‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤">
            <FaShoppingCart size={16} /> ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ({selectedItems.length})
          </button>
        </div>

        <section className={styles.leftPanel}>
          <div className={styles.sectionHeader}>
            <h2 className={styles.sectionTitle}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
            <div className={styles.filterControls}>
              <div className={styles.filterGroup}>
                <label className={styles.filterLabel}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</label>
                <select
                  className={styles.filterSelect}
                  value={categoryFilter}
                  onChange={(e) => setCategoryFilter(e.target.value)}
                  aria-label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                >
                  <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                  <option value="medicine">‡∏¢‡∏≤</option>
                  <option value="medsup">‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå</option>
                  <option value="equipment">‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</option>
                  <option value="meddevice">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå</option>
                  <option value="general">‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</option>
                </select>
              </div>
              <div className={styles.filterGroup}>
                <label className={styles.filterLabel}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å:</label>
                <select
                  className={styles.filterSelect}
                  value={stockFilter}
                  onChange={(e) => setStockFilter(e.target.value)}
                  aria-label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å"
                >
                  <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                  <option value="low">‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î</option>
                  <option value="near-low">‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î</option>
                </select>
              </div>
             
              <div className={styles.filterGroup}>
                <div className={styles.searchBox}>
                  <FaSearch size={14} className={styles.searchIcon} aria-hidden="true" />
                  <input
                    type="text"
                    className={styles.input}
                    placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    aria-label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠"
                  />
                </div>
              </div>
            </div>
          </div>

          <div className={styles.tableSection}>
            <div className={`${styles.tableGrid} ${styles.tableHeader}`}>
              <div className={styles.headerItem}>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
              <div className={styles.headerItem}>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</div>
              <div className={styles.headerItem}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</div>
              <div className={styles.headerItem}>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</div>
              <div className={styles.headerItem}>‡∏´‡∏ô‡πà‡∏ß‡∏¢</div>
              <div className={styles.headerItem}>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥</div>
              <div className={styles.headerItem}>‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</div>
              <div className={styles.headerItem}>‡πÄ‡∏û‡∏¥‡πà‡∏°</div>
            </div>

            <div className={styles.inventory} style={{ "--rows-per-page": ITEMS_PER_PAGE }}>
              {paginatedItems.length > 0 ? (
                paginatedItems.map((item) => (
                  <div key={item.item_id} className={`${styles.tableGrid} ${styles.tableRow}`}>
                    <div className={styles.tableCell}>{item.item_name}</div>
                    <div className={`${styles.tableCell} ${styles.imageCell}`}>
                      <ImageWithFallback item={item} />
                    </div>
                    <div className={styles.tableCell}>{mapCategoryToThai(item.item_category)}</div>
                    <div className={styles.tableCell}>
                      <span
                        className={
                          item.item_min && item.current_stock < item.item_min
                            ? styles.lowStock
                            : item.item_min &&
                              item.current_stock >= item.item_min &&
                              item.current_stock <= item.item_min + 10
                              ? styles.nearLowStock
                              : ""
                        }
                      >
                        {item.current_stock ?? 0}
                      </span>
                      {item.item_min && item.current_stock < item.item_min && (
                        <span className={styles.lowStockLabel}> üîª ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î</span>
                      )}
                      {item.item_min &&
                        item.current_stock >= item.item_min &&
                        item.current_stock <= item.item_min + 10 && (
                          <span className={styles.nearLowStockLabel}> ‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î</span>
                        )}
                    </div>
                    <div className={styles.tableCell}>{item.item_unit}</div>
                    <div className={styles.tableCell}>{item.item_min ?? "-"}</div>
                    <div className={styles.tableCell}>{item.item_max ?? "-"}</div>
                    <div className={styles.tableCell}>
                      <button
                        className={styles.addBtn}
                        onClick={() => handleAddItem(item)}
                        aria-label={`‡πÄ‡∏û‡∏¥‡πà‡∏° ${item.item_name} ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤`}
                      >
                        <FaPlus size={10} /> ‡πÄ‡∏û‡∏¥‡πà‡∏°
                      </button>
                    </div>
                  </div>
                ))
              ) : (
                <div className={styles.noDataMessage}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
              )}
            </div>

            <ul className={styles.paginationControls}>
              <li>
                <button
                  className={styles.pageButton}
                  onClick={() => setCurrentPage((c) => Math.max(1, c - 1))}
                  disabled={currentPage === 1}
                  aria-label="‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"
                >
                  <ChevronLeft size={16} />
                </button>
              </li>
              {getPageNumbers().map((p, idx) =>
                p === "..." ? (
                  <li key={`ellipsis-${idx}`} className={styles.ellipsis}>
                    ‚Ä¶
                  </li>
                ) : (
                  <li key={`page-${p}`}>
                    <button
                      className={`${styles.pageButton} ${p === currentPage ? styles.activePage : ""}`}
                      onClick={() => setCurrentPage(p)}
                      aria-label={`‡∏´‡∏ô‡πâ‡∏≤ ${p}`}
                      aria-current={p === currentPage ? "page" : undefined}
                    >
                      {p}
                    </button>
                  </li>
                )
              )}
              <li>
                <button
                  className={styles.pageButton}
                  onClick={() => setCurrentPage((c) => Math.min(totalPages, c + 1))}
                  disabled={currentPage === totalPages}
                  aria-label="‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
                >
                  <ChevronRight size={16} />
                </button>
              </li>
            </ul>
          </div>
        </section>

        <CartModal
          isOpen={isCartOpen}
          onClose={() => setIsCartOpen(false)}
          selectedItems={selectedItems}
          setSelectedItems={setSelectedItems}
          handleSubmit={handleSubmit}
          showToast={showToast}
        />
        <QuantityModal
          isOpen={isQuantityOpen}
          onClose={() => setIsQuantityOpen(false)}
          item={selectedItem}
          onConfirm={handleQuantityConfirm}
          showToast={showToast}
        />
        <Toast toasts={toasts} removeToast={(id) => setToasts((prev) => prev.filter((t) => t.id !== id))} />
      </div>
    </div>
  );
}