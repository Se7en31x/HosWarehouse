'use client';
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { useParams, useSearchParams, useRouter } from 'next/navigation';
import Swal from 'sweetalert2';
import styles from './page.module.css';
import axiosInstance from '@/app/utils/axiosInstance';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSpinner } from '@fortawesome/free-solid-svg-icons';
import Link from 'next/link';

/* ---------- Utilities ---------- */
const statusMap = {
  // ‡∏£‡∏ß‡∏°/‡∏Ñ‡∏≥‡∏Ç‡∏≠
  approved_all: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
  approved_partial: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô',
  waiting_approval: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
  rejected_all: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
  canceled: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠',

  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  approved: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
  rejected: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß',
  waiting_approval_detail: '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)',

  // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (processing)
  approved_in_queue: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
  pending: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
  preparing: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏±‡∏™‡∏î‡∏∏',
  delivering: '‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏™‡πà‡∏á',
  completed: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
  partially_processed: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô',
  no_approved_for_processing: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
  unknown_processing_state: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',

  // ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ / ‡∏Ñ‡∏∑‡∏ô
  imported: '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß',
  returned_complete: '‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö',
  returned_partially: '‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô',
  moved: '‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
  adjusted: '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
  scrapped: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å/‡∏ä‡∏≥‡∏£‡∏∏‡∏î',

  // ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  'N/A': 'N/A',
  null: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
  unknown_status: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',

  returned: '‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
  returned_complete: '‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö',
  returned_partially: '‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô',
  damaged: '‡∏Ñ‡∏∑‡∏ô/‡∏ä‡∏≥‡∏£‡∏∏‡∏î',
  lost: '‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢',
  overdue_return: '‡∏Ñ‡∏∑‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤',
};

const getTranslatedStatus = (status) => {
  if (status == null || status === '') return '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  return statusMap[status] || status;
};

const getStatusTone = (key) => {
  switch (key) {
    case 'approved_all':
    case 'approved_partial':
    case 'approved':
    case 'adjusted':
      return 'Green';
    case 'waiting_approval':
    case 'waiting_approval_detail':
    case 'approved_in_queue':
    case 'returned_partially':   // üÜï ‡∏Ñ‡∏£‡∏≠‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ó‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
      return 'Yellow';
    case 'completed':
    case 'imported':
    case 'returned_complete':
    case 'moved':
      return 'Blue';
    case 'rejected_all':
    case 'rejected':
    case 'canceled':
    case 'scrapped':
      return 'Red';
    default:
      return 'Gray';
  }
};

const formatDate = (dateStr) => {
  if (!dateStr) return '-';
  try {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) return '-';
    return (
      date.toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        timeZone: 'Asia/Bangkok',
      }) +
      `, ${date.toLocaleTimeString('th-TH', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false,
        timeZone: 'Asia/Bangkok',
      })}`
    );
  } catch {
    return '-';
  }
};

const toThaiRequestMode = (v) => {
  if (!v) return '‡πÄ‡∏ö‡∏¥‡∏Å';
  const s = String(v).toLowerCase();
  return s === 'borrow' || s === '‡∏¢‡∏∑‡∏°' ? '‡∏¢‡∏∑‡∏°' : '‡πÄ‡∏ö‡∏¥‡∏Å';
};

const StatusPill = ({ value }) => {
  const key = value ?? 'unknown_status';
  const tone = getStatusTone(key);
  return (
    <span className={`${styles.badge} ${styles[`badge${tone}`]}`}>
      {getTranslatedStatus(key)}
    </span>
  );
};
/* ---------- End Utilities ---------- */

export default function RequestDetailPage() {
  const params = useParams();
  const requestId = params?.transactionId;

  const searchParams = useSearchParams();
  const router = useRouter();

  // ‡πÇ‡∏´‡∏°‡∏î STOCK_MOVEMENT: ?move_code=...
  const moveCode = (searchParams?.get('move_code') || '').trim();
  const isStockMode = Boolean(moveCode);

  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á
  // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° 'return' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏°
  const viewParam = (searchParams?.get('view') || '').toLowerCase();
  const validViews = new Set(['create', 'approval', 'processing', 'return']);
  const activeView = isStockMode ? 'stock' : (validViews.has(viewParam) ? viewParam : 'create');

  // üÜï ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏ü‡∏Å‡∏±‡∏™
  const retFocus = (searchParams?.get('ret') || '').trim(); // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: RET-123

  // ========== State ==========
  const [requestData, setRequestData] = useState(null);
  const [stockRows, setStockRows] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // refs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏ü‡∏Å‡∏±‡∏™
  const returnRowRefs = useRef({});

  // ========== Fetchers ==========
  const fetchRequestDetails = useCallback(async () => {
    if (!requestId) return;
    setLoading(true);
    setError(null);
    try {
      const response = await axiosInstance.get(`/transaction-history/request/${requestId}`);
      setRequestData(response?.data?.data ?? null);
    } catch (err) {
      console.error('Fetch error:', err);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
      Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ', 'error');
    } finally {
      setLoading(false);
    }
  }, [requestId]);

  const fetchStockMovementByCode = useCallback(async () => {
    if (!moveCode) return;
    setLoading(true);
    setError(null);
    try {
      const res = await axiosInstance.get('/transaction-history/stock-movement', {
        params: { move_code: moveCode },
      });
      const rows = Array.isArray(res?.data?.data) ? res.data.data : [];
      setStockRows(rows);
    } catch (err) {
      console.error('Fetch stock error:', err);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ');
      Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ', 'error');
    } finally {
      setLoading(false);
    }
  }, [moveCode]);

  useEffect(() => {
    if (isStockMode) {
      fetchStockMovementByCode();
    } else {
      fetchRequestDetails();
    }
  }, [isStockMode, fetchRequestDetails, fetchStockMovementByCode]);

  // ========== Derived ==========
  const summary = requestData?.summary || {};
  const history = requestData?.history || { approvalHistory: [], processingHistory: [] };
  const lineItems = requestData?.lineItems || [];
  const returnHistory = requestData?.returnHistory || []; // üÜï ‡∏à‡∏≤‡∏Å backend

  const requestTypeThai = summary.request_type_thai || toThaiRequestMode(summary.request_type);
  const isBorrow = requestTypeThai === '‡∏¢‡∏∑‡∏°';

  // ========== Focus ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ==========
  useEffect(() => {
    if (!isBorrow || !Array.isArray(returnHistory) || returnHistory.length === 0) return;
    if (!retFocus) return;
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡∏ß‡∏≤‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á
    const t = setTimeout(() => {
      const el = returnRowRefs.current?.[retFocus];
      if (el?.scrollIntoView) {
        el.scrollIntoView({ behavior: 'smooth', block: 'center' });
        el.classList.add(styles.focusRow);
        setTimeout(() => el.classList.remove(styles.focusRow), 2000);
      }
    }, 150);
    return () => clearTimeout(t);
  }, [isBorrow, returnHistory, retFocus]);

  // ========== Rendering ==========
  if (loading) {
    return (
      <div className={styles.loadingContainer}>
        <FontAwesomeIcon icon={faSpinner} spin size="2x" />
        <p className={styles.loading}>
          {isStockMode ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å...' : '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠...'}
        </p>
      </div>
    );
  }

  if (error || (!isStockMode && !requestData)) {
    return (
      <div className={`${styles.container} ${styles.errorContainer}`}>
        <p>{error || (isStockMode ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å' : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏')}</p>
        <button onClick={isStockMode ? fetchStockMovementByCode : fetchRequestDetails} className={styles.retryBtn}>
          ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
        </button>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.card}>
        {/* Header */}
        <div className={styles.header}>
          {isStockMode ? (
            <h1 className={styles.heading}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å: {moveCode}</h1>
          ) : (
            <h1 className={styles.heading}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å: {summary.request_code}</h1>
          )}
          <Link href="/manage/transactionHistory" passHref>
            <button className={styles.backButton}>&larr; ‡∏Å‡∏•‡∏±‡∏ö</button>
          </Link>
        </div>

        {/* ===== STOCK MOVEMENT MODE ===== */}
        {isStockMode ? (
          <>
            <h2 className={styles.subHeading}>‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å</h2>
            {/* ... (‡∏™‡πà‡∏ß‡∏ô stock ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô) ... */}
            <div className={styles.tableWrapper}>
              <table className={styles.table}>
                <thead>
                  <tr>
                    <th>#</th>
                    <th>‡∏£‡∏´‡∏±‡∏™‡∏û‡∏±‡∏™‡∏î‡∏∏</th>
                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏™‡∏î‡∏∏</th>
                    <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                    <th>‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤</th>
                    <th>‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                    <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                  </tr>
                </thead>
                <tbody>
                  {Array.isArray(stockRows) && stockRows.length > 0 ? (
                    stockRows.map((r, idx) => (
                      <tr key={`mv-${idx}`}>
                        <td>{idx + 1}</td>
                        <td>{r.item_id ?? '-'}</td>
                        <td>{r.item_name ?? '-'}</td>
                        <td>{r.move_qty ?? '-'}</td>
                        <td>{formatDate(r.move_date)}</td>
                        <td>{r.user_name ?? '-'}</td>
                        <td>{r.note ?? ''}</td>
                      </tr>
                    ))
                  ) : (
                    <tr className={styles.noDataRow}>
                      <td colSpan={7}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡πâ‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </>
        ) : (
          /* ===== REQUEST MODE ===== */
          <>
            {/* Tabs */}
            <div className={styles.tabBar}>
              <button
                className={`${styles.tabBtn} ${activeView === 'create' ? styles.tabActive : ''}`}
                onClick={() => router.replace(`/manage/transactionHistory/${requestId}?view=create`)}
              >
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠
              </button>
              <button
                className={`${styles.tabBtn} ${activeView === 'approval' ? styles.tabActive : ''}`}
                onClick={() => router.replace(`/manage/transactionHistory/${requestId}?view=approval`)}
              >
                ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
              </button>
              <button
                className={`${styles.tabBtn} ${activeView === 'processing' ? styles.tabActive : ''}`}
                onClick={() => router.replace(`/manage/transactionHistory/${requestId}?view=processing`)}
              >
                ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
              </button>
              {isBorrow && (
                <button
                  className={`${styles.tabBtn} ${activeView === 'return' ? styles.tabActive : ''}`}
                  onClick={() => router.replace(`/manage/transactionHistory/${requestId}?view=return`)}
                >
                  ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
                </button>
              )}
            </div>

            {/* Summary */}
            <h2 className={styles.subHeading}>‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠</h2>
            <div className={styles.detailGrid}>
              <div className={styles.detailItem}>
                <strong>‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏Ç‡∏≠:</strong>
                <span>{summary.request_code || '-'}</span>
              </div>
              <div className={styles.detailItem}>
                <strong>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</strong>
                <span>{summary.user_name || '-'}</span>
              </div>
              <div className={styles.detailItem}>
                <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠:</strong>
                <span>{formatDate(summary.request_date)}</span>
              </div>
              <div className={styles.detailItem}>
                <strong>‡πÅ‡∏ú‡∏ô‡∏Å:</strong>
                <span>{summary.department || '-'}</span>
              </div>
              <div className={styles.detailItem}>
                <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠:</strong>
                <span className={`${styles.badge} ${styles.badgeGray}`}>
                  {summary.request_type_thai || toThaiRequestMode(summary.request_type)}
                </span>
              </div>
            </div>

            {/* CREATE */}
            {activeView === 'create' && (
              <>
                <h2 className={styles.subHeading}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≠</h2>
                <div className={styles.tableWrapper}>
                  <table className={styles.table}>
                    <thead>
                      <tr>
                        <th>#</th>
                        <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏™‡∏î‡∏∏</th>
                        <th>‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                        {isBorrow && <th>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô</th>}
                      </tr>
                    </thead>
                    <tbody>
                      {Array.isArray(lineItems) && lineItems.length ? (
                        lineItems.map((it, idx) => (
                          <tr key={it.request_detail_id || idx}>
                            <td>{idx + 1}</td>
                            <td>{it.item_name || '-'}</td>
                            <td>{it.item_unit || '-'}</td>
                            <td>{it.requested_qty ?? '-'}</td>
                            <td>{it.approved_qty ?? '-'}</td>
                            <td><StatusPill value={it.approval_status ?? 'unknown_status'} /></td>
                            <td><StatusPill value={it.processing_status ?? 'unknown_processing_state'} /></td>
                            {isBorrow && <td>{formatDate(it.expected_return_date)}</td>}
                          </tr>
                        ))
                      ) : (
                        <tr className={styles.noDataRow}>
                          <td colSpan={isBorrow ? 8 : 7}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ</td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </>
            )}

            {/* APPROVAL */}
            {activeView === 'approval' && (
              <>
                <h2 className={styles.subHeading}>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
                <div className={styles.tableWrapper}>
                  <table className={styles.table}>
                    <thead>
                      <tr>
                        <th>‡πÄ‡∏ß‡∏•‡∏≤/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                        <th>‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
                        <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏™‡∏î‡∏∏</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                      </tr>
                    </thead>
                    <tbody>
                      {Array.isArray(history.approvalHistory) && history.approvalHistory.length > 0 ? (
                        history.approvalHistory.map((item, index) => (
                          <tr key={`appr-${index}`}>
                            <td>{formatDate(item.changed_at)}</td>
                            <td>{item.changed_by_user || '-'}</td>
                            <td>{item.item_name || '-'}</td>
                            <td>{item.requested_qty ?? '-'}</td>
                            <td>{item.approved_qty ?? '-'}</td>
                            <td><StatusPill value={item.new_value} /></td>
                          </tr>
                        ))
                      ) : (
                        <tr className={styles.noDataRow}>
                          <td colSpan={6}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </>
            )}

            {/* PROCESSING */}
            {activeView === 'processing' && (
              <>
                <h2 className={styles.subHeading}>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h2>
                <div className={styles.tableWrapper}>
                  <table className={styles.table}>
                    <thead>
                      <tr>
                        <th>‡πÄ‡∏ß‡∏•‡∏≤/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                        <th>‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                        <th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏™‡∏î‡∏∏</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà</th>
                      </tr>
                    </thead>
                    <tbody>
                      {Array.isArray(history.processingHistory) && history.processingHistory.length > 0 ? (
                        history.processingHistory.map((item, index) => (
                          <tr key={`proc-${index}`}>
                            <td>{formatDate(item.changed_at)}</td>
                            <td>{item.changed_by_user || '-'}</td>
                            <td>{item.item_name || '-'}</td>
                            <td><StatusPill value={item.old_value} /></td>
                            <td><StatusPill value={item.new_value} /></td>
                          </tr>
                        ))
                      ) : (
                        <tr className={styles.noDataRow}>
                          <td colSpan={5}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </>
            )}

            {/* üÜï RETURN */}
            {isBorrow && activeView === 'return' && (
              <>
                <h2 className={styles.subHeading}>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô</h2>
                <div className={styles.tableWrapper}>
                  <table className={styles.table}>
                    <thead>
                      <tr>
                        <th>‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏∑‡∏ô</th>
                        <th>‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤</th>
                        <th>‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏ö</th>
                        <th>‡∏û‡∏±‡∏™‡∏î‡∏∏</th>
                        <th>‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                        <th>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
                        <th>‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ</th>
                        <th>‡∏Ñ‡∏∑‡∏ô‡∏™‡∏∞‡∏™‡∏°</th>
                        <th>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                      </tr>
                    </thead>
                    <tbody>
                      {Array.isArray(returnHistory) && returnHistory.length > 0 ? (
                        returnHistory.map((row, idx) => (
                          <tr
                            key={`ret-${idx}-${row.return_id}-${row.request_detail_id}`}
                            ref={(el) => {
                              // ‡πÄ‡∏Å‡πá‡∏ö ref ‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏∑‡∏ô (RET-xxx) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ ?ret=
                              if (el && row.return_code) {
                                returnRowRefs.current[row.return_code] = el;
                              }
                            }}
                          >
                            <td>{row.return_code}</td>
                            <td>{formatDate(row.return_date)}</td>
                            <td>{row.inspected_by_name || '-'}</td>
                            <td>{row.item_name || '-'}</td>
                            <td>{row.item_unit || '-'}</td>
                            <td>{row.approved_qty ?? 0}</td>
                            <td>{row.returned_this_time ?? 0}</td>
                            <td>{row.returned_total ?? 0}</td>
                            <td>{row.remaining_qty ?? 0}</td>
                            <td><StatusPill value={row.return_status_code} /></td>
                          </tr>
                        ))
                      ) : (
                        <tr className={styles.noDataRow}>
                          <td colSpan={10}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô</td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </>
            )}
          </>
        )}
      </div>
    </div>
  );
}
