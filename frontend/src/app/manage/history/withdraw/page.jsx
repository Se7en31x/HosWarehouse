'use client';

import { useState, useEffect } from 'react';
import axiosInstance from '@/app/utils/axiosInstance';
import Swal from 'sweetalert2';
import styles from './page.module.css';

// ‚úÖ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏° (‡∏Ñ‡∏≥‡∏Ç‡∏≠)
const statusMap = {
  draft: '‡∏£‡πà‡∏≤‡∏á',
  waiting_approval: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
  approved_all: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
  approved_partial: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô',
  approved_partial_and_rejected_partial : '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô',
  rejected_all: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
  canceled: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',

};

// ‚úÖ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
const detailStatusMap = {
  approved: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
  waiting_approval_detail: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
  rejected: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
};

// ‚úÖ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
const processingStatusMap = {
  pending: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
  approved_in_queue: '‡∏£‡∏≠‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°',
  preparing: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°',
  processing: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
  completed: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
  returned: '‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
};

// ‚úÖ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô
const urgentMap = {
  true: '‡∏î‡πà‡∏ß‡∏ô',
  false: '‡∏õ‡∏Å‡∏ï‡∏¥',
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
const formatThaiDate = (isoString, type = 'short') => {
  if (!isoString) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  const date = new Date(isoString);
  if (isNaN(date.getTime())) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';

  if (type === 'short') {
    return date.toLocaleString('th-TH', {
      year: '2-digit',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
  }

  return date.toLocaleString('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
};

export default function WithdrawHistory() {
  const [data, setData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // üîπ State ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterUrgent, setFilterUrgent] = useState('all');
  const [searchText, setSearchText] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');

  // üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  useEffect(() => {
    const fetchData = async () => {
      try {
        const res = await axiosInstance.get('/history/withdraw');
        setData(Array.isArray(res.data) ? res.data.filter((item) => item && item.request_id) : []);
      } catch (err) {
        console.error('‚ùå Error fetching withdraw history:', err);
        Swal.fire({
          icon: 'error',
          title: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
        });
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, []);

  // üîπ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const filteredData = data.filter((req) => {
    let matchStatus = filterStatus === 'all' || req.request_status === filterStatus;
    let matchUrgent =
      filterUrgent === 'all' ||
      (filterUrgent === 'urgent' && req.is_urgent) ||
      (filterUrgent === 'normal' && !req.is_urgent);

    // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const searchLower = searchText.toLowerCase();
    let matchSearch =
      req.request_code?.toLowerCase().includes(searchLower) ||
      req.department?.toLowerCase().includes(searchLower) ||
      req.requester_name?.toLowerCase().includes(searchLower);

    // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    let matchDate = true;
    if (startDate) {
      matchDate = new Date(req.request_date) >= new Date(startDate);
    }
    if (endDate) {
      matchDate = matchDate && new Date(req.request_date) <= new Date(endDate + 'T23:59:59');
    }

    return matchStatus && matchUrgent && matchSearch && matchDate;
  });

  // üîπ Popup ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  const showDetail = (row) => {
    const itemList = (row.details || []).map((i) => {
      const detailStatus = detailStatusMap[i.status] || i.status;
      const processingStatus = processingStatusMap[i.processing_status] || '‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
      const requestType = i.request_detail_type === 'borrow' ? '‡∏¢‡∏∑‡∏°' : '‡πÄ‡∏ö‡∏¥‡∏Å';

      return `
        <tr>
          <td style="word-break: break-word; max-width: 150px">${i.item_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
          <td class="text-right">${i.approved_qty ?? 0}/${i.requested_qty ?? 0} ${i.unit || '-'}</td>
          <td style="color:${i.status === 'approved'
            ? 'green'
            : i.status === 'waiting_approval_detail'
            ? 'orange'
            : 'red'}">${detailStatus}</td>
          <td>${requestType}</td>
          <td>${processingStatus}</td>
        </tr>`;
    }).join('');

    Swal.fire({
      title: `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠ ${row.request_code}`,
      html: `
        <div class="modal-header">
          <div><b>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</b> ${row.requester_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} | <b>‡πÅ‡∏ú‡∏ô‡∏Å:</b> ${row.department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
          <div><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠:</b> ${formatThaiDate(row.request_date, 'long')}</div>
          <div><b>‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:</b> ${row.approved_by_name || '-'} | <b>‡πÄ‡∏°‡∏∑‡πà‡∏≠:</b> ${formatThaiDate(row.approved_at, 'long')}</div>
          <div><b>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:</b> ${row.is_urgent ? urgentMap.true : urgentMap.false}</div>
        </div>
        <hr class="modal-divider" />
        <div class="modal-details">
          <table class="detail-table">
            <thead>
              <tr>
                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                <th class="text-right">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏Ç‡∏≠)</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              ${itemList || '<tr><td colspan="5">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</td></tr>'}
            </tbody>
          </table>
        </div>
      `,
      showCloseButton: true,
      confirmButtonText: '‡∏õ‡∏¥‡∏î',
      customClass: {
        popup: styles.swalPopup,
        confirmButton: styles.swalBtn,
        closeButton: styles.swalClose,
      },
    });
  };

  return (
    <div className={styles.page}>
      <div className={styles.header}>
        <h2 className={styles.title}>üì¶ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å/‡∏¢‡∏∑‡∏°</h2>
        <p className={styles.subtitle}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏°‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</p>
      </div>

      {/* ‚úÖ Dashboard summary */}
      <div className={styles.summaryCards}>
        <div className={styles.card}><h4>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h4><p>{data.length}</p></div>
        <div className={styles.card}><h4>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</h4><p>{data.filter(d => d.request_status === 'approved_all').length}</p></div>
        <div className={styles.card}><h4>‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h4><p>{data.filter(d => d.request_status === 'waiting_approval').length}</p></div>
        <div className={styles.card}><h4>‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</h4><p>{data.filter(d => ['canceled', 'rejected_all'].includes(d.request_status)).length}</p></div>
      </div>

      {/* ‚úÖ Filters */}
      <div className={styles.filters}>
        <select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)}>
          <option value="all">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
          <option value="waiting_approval">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</option>
          <option value="approved_all">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
          <option value="approved_partial">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô</option>
          <option value="rejected_all">‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</option>
          <option value="canceled">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
        </select>

        <select value={filterUrgent} onChange={(e) => setFilterUrgent(e.target.value)}>
          <option value="all">‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô/‡∏õ‡∏Å‡∏ï‡∏¥</option>
          <option value="urgent">‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô</option>
          <option value="normal">‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥</option>
        </select>

        {/* ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏Ç‡∏≠ / ‡πÅ‡∏ú‡∏ô‡∏Å / ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
          className={styles.searchInput}
        />

        {/* ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
        <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
        <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
      </div>

      {/* ‚úÖ Table */}
      <div className={styles.tableWrapper}>
        {isLoading ? (
          <div className={styles.loadingContainer}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
        ) : filteredData.length === 0 ? (
          <div className={styles.noDataMessage}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å/‡∏¢‡∏∑‡∏°</div>
        ) : (
          <table className={styles.table}>
            <thead>
              <tr>
                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                <th>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏Ç‡∏≠</th>
                <th>‡πÅ‡∏ú‡∏ô‡∏Å</th>
                <th>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠</th>
                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                <th>‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°</th>
                <th>‡∏î‡πà‡∏ß‡∏ô</th>
                <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
              </tr>
            </thead>
            <tbody>
              {filteredData.map((req) => (
                <tr key={req.request_id}>
                  <td>{formatThaiDate(req.request_date, 'short')}</td>
                  <td>{req.request_code || '-'}</td>
                  <td>{req.department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                  <td>{req.requester_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                  <td className="text-right">{req.total_items ?? 0}</td>
                  <td className="text-right">{req.total_qty ?? 0}</td>
                  <td>
                    <span className={`${styles.badge} ${
                      req.request_status === 'approved_all'
                        ? styles.approved
                        : req.request_status === 'approved_partial'
                        ? styles.partial
                        : req.request_status === 'waiting_approval'
                        ? styles.waiting
                        : styles.rejected
                    }`}>
                      {statusMap[req.request_status] || req.request_status}
                    </span>
                  </td>
                  <td>
                    <span className={`${styles.badge} ${req.is_urgent ? styles.urgent : styles.normal}`}>
                      {req.is_urgent ? urgentMap.true : urgentMap.false}
                    </span>
                  </td>
                  <td>
                    <button onClick={() => showDetail(req)} className={styles.btn}>
                      ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
}
