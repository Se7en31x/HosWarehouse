"use client";
import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import axiosInstance from "@/app/utils/axiosInstance";
import styles from "./page.module.css";

const typeMap = {
  stockin: "‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤",
  withdraw: "‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å",
  "borrow-return": "‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° / ‡∏Ñ‡∏∑‡∏ô",
  expired: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
  damaged: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∏‡∏î / ‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢",
  stockout: "‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å",
};

const translateStatus = (status) => {
  switch (status?.toLowerCase()) {
    case "completed":
      return "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô";
    case "pending":
      return "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£";
    case "processing":
      return "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£";
    default:
      return status || "‚Äî";
  }
};

export default function HistoryTypePage() {
  const { type } = useParams();
  const [records, setRecords] = useState([]);
  const [selected, setSelected] = useState(null);
  const [search, setSearch] = useState("");
  const [filter, setFilter] = useState("all");

  useEffect(() => {
    axiosInstance
      .get(`/history/${type}`)
      .then((res) => setRecords(res.data))
      .catch(() => setRecords([]));
  }, [type]);

  const filteredRecords = records.filter((r) => {
    const matchSearch =
      search === "" ||
      r.description.toLowerCase().includes(search.toLowerCase()) ||
      r.user_name.toLowerCase().includes(search.toLowerCase());
    const matchFilter =
      filter === "all" ||
      (filter === "this_month" &&
        new Date(r.created_at).getMonth() === new Date().getMonth());
    return matchSearch && matchFilter;
  });

  return (
    <div className={styles.container}>
      <h2 className={styles.subtitle}>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥{typeMap[type] || type}</h2>

      {/* Toolbar */}
      <div className={styles.toolbar}>
        <input
          type="text"
          placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
          className={styles.search}
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <select
          className={styles.filter}
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
        >
          <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
          <option value="this_month">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</option>
          <option value="last_month">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß</option>
        </select>
        <button className={styles.exportBtn}>‚¨áÔ∏è ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV</button>
      </div>

      {/* Table */}
      <table className={styles.table}>
        <thead>
          <tr>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
            <th>‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {filteredRecords.length > 0 ? (
            filteredRecords.map((r) => (
              <tr key={r.history_id}>
                <td>{new Date(r.created_at).toLocaleString("th-TH")}</td>
                <td>{r.description}</td>
                <td>{r.user_name}</td>
                <td>
                  <span className={`${styles.badge} ${styles[r.status]}`}>
                    {translateStatus(r.status)}
                  </span>
                </td>
                <td>
                  <button
                    className={styles.detailBtn}
                    onClick={() => setSelected(r)}
                  >
                    ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="5" className={styles.noData}>
                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </td>
            </tr>
          )}
        </tbody>
      </table>

      {/* Modal */}
      {selected && (
        <div className={styles.modalOverlay}>
          <div className={styles.modal}>
            <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h3>
            <p>
              <b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b>{" "}
              {new Date(selected.created_at).toLocaleString("th-TH")}
            </p>
            <p>
              <b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b> {selected.description}
            </p>
            <p>
              <b>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢:</b> {selected.user_name}
            </p>
            <button
              className={styles.closeBtn}
              onClick={() => setSelected(null)}
            >
              ‡∏õ‡∏¥‡∏î
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
