"use client";
import { useEffect, useState, useMemo } from "react";
import axiosInstance from "@/app/utils/axiosInstance";
import styles from "./page.module.css";

// ‚îÄ‚îÄ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏• ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const damageTypeMap = {
  damaged: "‡∏ä‡∏≥‡∏£‡∏∏‡∏î",
  lost: "‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢",
};

const statusMap = {
  waiting: "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
  sent_repair: "‡∏™‡πà‡∏á‡∏ã‡πà‡∏≠‡∏°",
  repaired: "‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
  discarded: "‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ó‡∏¥‡πâ‡∏á",
};

const sourceMap = {
  borrow_return: "‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°",
  stock_check: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏ï‡πá‡∏≠‡∏Å",
};

export default function DamagedHistoryPage() {
  const [records, setRecords] = useState([]);
  const [selected, setSelected] = useState(null);
  const [loadingDetail, setLoadingDetail] = useState(false);

  // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const [search, setSearch] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [typeFilter, setTypeFilter] = useState("all");

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Flat list
  useEffect(() => {
    axiosInstance
      .get("/history/damaged")
      .then((res) => setRecords(res.data || []))
      .catch((err) =>
        console.error("‚ùå Error fetching damaged history:", err)
      );
  }, []);

  const formatDate = (dateStr) => {
    if (!dateStr) return "-";
    return new Date(dateStr).toLocaleDateString("th-TH", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  // ‚úÖ Dashboard Summary (‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
  const summary = useMemo(() => {
    return {
      total: records.length,
      damaged: records.filter((r) => r.damage_type === "damaged").length,
      lost: records.filter((r) => r.damage_type === "lost").length,
    };
  }, [records]);

  // ‚úÖ Filter + Search
  const filteredRecords = useMemo(() => {
    return records.filter((r) => {
      const matchesSearch =
        r.item_name?.toLowerCase().includes(search.toLowerCase()) ||
        r.reported_by?.toLowerCase().includes(search.toLowerCase());

      const matchesStatus =
        statusFilter === "all" || r.damaged_status === statusFilter;

      const matchesType =
        typeFilter === "all" || r.damage_type === typeFilter;

      return matchesSearch && matchesStatus && matchesType;
    });
  }, [records, search, statusFilter, typeFilter]);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î grouped
  const fetchDetail = async (damagedId) => {
    setLoadingDetail(true);
    try {
      const res = await axiosInstance.get(`/history/damaged/${damagedId}`);
      setSelected(res.data);
    } catch (err) {
      console.error("‚ùå Error fetching damaged detail:", err);
    } finally {
      setLoadingDetail(false);
    }
  };

  return (
    <div className={styles.container}>
      <h2 className={styles.subtitle}>‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ä‡∏≥‡∏£‡∏∏‡∏î / ‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢</h2>

      {/* ‚úÖ Dashboard Summary */}
      <div className={styles.dashboard}>
        <div className={`${styles.card} ${styles.cardAll}`}>
          <p>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
          <h3>{summary.total}</h3>
        </div>
        <div className={`${styles.card} ${styles.cardDamaged}`}>
          <p>‡∏ä‡∏≥‡∏£‡∏∏‡∏î</p>
          <h3>{summary.damaged}</h3>
        </div>
        <div className={`${styles.card} ${styles.cardLost}`}>
          <p>‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢</p>
          <h3>{summary.lost}</h3>
        </div>
      </div>

      {/* ‚úÖ Search + Filters */}
      <div className={styles.filterBar}>
        <input
          type="text"
          className={styles.searchInput}
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏±‡∏™‡∏î‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <select
          className={styles.filterSelect}
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value)}
        >
          <option value="all">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
          {Object.entries(statusMap).map(([key, val]) => (
            <option key={key} value={key}>
              {val}
            </option>
          ))}
        </select>
        <select
          className={styles.filterSelect}
          value={typeFilter}
          onChange={(e) => setTypeFilter(e.target.value)}
        >
          <option value="all">‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
          {Object.entries(damageTypeMap).map(([key, val]) => (
            <option key={key} value={key}>
              {val}
            </option>
          ))}
        </select>
      </div>

      <table className={styles.table}>
        <thead>
          <tr>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            <th>‡∏û‡∏±‡∏™‡∏î‡∏∏</th>
            <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
            <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
            <th>‡∏ó‡∏µ‡πà‡∏°‡∏≤</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th>‡∏ú‡∏π‡πâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {filteredRecords.length > 0 ? (
            filteredRecords.map((r, idx) => (
              <tr key={`${r.damaged_id}-${idx}`}>
                <td>{formatDate(r.damaged_date)}</td>
                <td>{r.item_name}</td>
                <td>
                  {r.damaged_qty} {r.item_unit}
                </td>
                <td>{damageTypeMap[r.damage_type] || r.damage_type}</td>
                <td>{sourceMap[r.source_type] || r.source_type || "-"}</td>
                <td>{statusMap[r.damaged_status] || r.damaged_status}</td>
                <td>{r.reported_by}</td>
                <td>
                  <button
                    className={styles.detailBtn}
                    onClick={() => fetchDetail(r.damaged_id)}
                  >
                    ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="8" className={styles.empty}>
                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </td>
            </tr>
          )}
        </tbody>
      </table>

      {/* ‚úÖ Modal ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
      {selected && (
        <div className={styles.modalOverlay}>
          <div className={styles.modalLarge}>
            <h3 className={styles.modalTitle}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h3>

            {/* ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å */}
            <div className={styles.detailGrid}>
              <div><b>‡∏û‡∏±‡∏™‡∏î‡∏∏:</b> {selected.item_name} ({selected.damaged_qty} {selected.item_unit})</div>
              <div><b>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</b> {damageTypeMap[selected.damage_type] || selected.damage_type}</div>
              <div><b>‡∏ó‡∏µ‡πà‡∏°‡∏≤:</b> {sourceMap[selected.source_type] || selected.source_type || "-"}</div>
              <div><b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> {statusMap[selected.damaged_status] || selected.damaged_status}</div>
              <div><b>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢:</b> {selected.reported_by}</div>
              <div><b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</b> {selected.damaged_note || "-"}</div>
            </div>

            {/* ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏¢‡∏Å damaged / lost */}
            {selected.damage_type === "lost" ? (
              <div className={styles.lostNotice}>
                ‚ùå ‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢ - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ
              </div>
            ) : (
              <>
                <h4 className={styles.sectionTitle}>üìå ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h4>
                {loadingDetail ? (
                  <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
                ) : selected.actions && selected.actions.length > 0 ? (
                  <table className={styles.actionTable}>
                    <thead>
                      <tr>
                        <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                        <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                        <th>‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                      </tr>
                    </thead>
                    <tbody>
                      {selected.actions.map((a, idx) => (
                        <tr key={idx}>
                          <td>{formatDate(a.action_date)}</td>
                          <td>{statusMap[a.action_type] || a.action_type}</td>
                          <td>{a.action_qty}</td>
                          <td>{a.action_by}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                ) : (
                  <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</p>
                )}
              </>
            )}

            <button
              className={styles.closeBtn}
              onClick={() => setSelected(null)}
            >
              ‡∏õ‡∏¥‡∏î
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
