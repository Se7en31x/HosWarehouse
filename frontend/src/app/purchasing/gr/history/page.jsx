'use client';

import React, { useMemo, useState } from 'react';

/** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MOCK DATA (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const GR_HISTORY = [
  {
    id:'GR-2025-001',
    date:'2025-08-25',
    po_no:'PO-2025-001',
    supplier:'‡∏ö‡∏à‡∏Å.‡πÄ‡∏°‡∏î‡∏¥‡∏Ñ‡∏≠‡∏•‡∏û‡∏•‡∏±‡∏™',
    receiver:'‡∏Ñ‡∏•‡∏±‡∏á A',
    doc_no:'DO-88991',
    attachments:['DO-88991.pdf'],
    good:50, damaged:0, returned:0,
    lines:[{ code:'MED001', name:'‡∏¢‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡πÄ‡∏ã‡∏ï‡∏≤‡∏°‡∏≠‡∏• 500mg', unit:'‡∏Å‡∏•‡πà‡∏≠‡∏á', good:50, damaged:0, returned:0, reason:'' }]
  },
  {
    id:'GR-2025-002',
    date:'2025-08-26',
    po_no:'PO-2025-002',
    supplier:'‡∏´‡∏à‡∏Å.‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ',
    receiver:'‡∏Ñ‡∏•‡∏±‡∏á A',
    doc_no:'DO-77012',
    attachments:['DO-77012.pdf','INV-77012.pdf'],
    good:25, damaged:2, returned:3,
    lines:[
      { code:'MED010', name:'‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå 70%', unit:'‡∏Ç‡∏ß‡∏î', good:20, damaged:2, returned:3, reason:'‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ö‡∏∏‡∏ö/‡∏£‡∏±‡πà‡∏ß' },
      { code:'GEN005', name:'‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ó‡∏¥‡∏ä‡∏ä‡∏π‡πà 2 ‡∏ä‡∏±‡πâ‡∏ô', unit:'‡πÅ‡∏û‡πá‡∏Ñ', good:5,  damaged:0, returned:0, reason:'' },
    ]
  },
  {
    id:'GR-2025-003',
    date:'2025-08-28',
    po_no:'PO-2025-003',
    supplier:'‡∏ö‡∏à‡∏Å.‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏≤‡∏û‡∏•‡∏±‡∏™',
    receiver:'‡∏Ñ‡∏•‡∏±‡∏á B',
    doc_no:'DO-55221',
    attachments:[],
    good:10, damaged:0, returned:0,
    lines:[
      { code:'MED020', name:'‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢ 3 ‡∏ä‡∏±‡πâ‡∏ô', unit:'‡∏Å‡∏•‡πà‡∏≠‡∏á', good:10, damaged:0, returned:0, reason:'' },
    ]
  },
];
/** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

export default function GrHistoryPage() {
  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
  const [q, setQ] = useState('');
  const [from, setFrom] = useState('2025-08-01');
  const [to, setTo]     = useState('2025-08-31');
  const [onlyIssues, setOnlyIssues] = useState(false); // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏Ñ‡∏™‡∏°‡∏µ‡∏ä‡∏≥‡∏£‡∏∏‡∏î/‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô

  // ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  const [openId, setOpenId] = useState(null);

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const data = useMemo(() => {
    const s = q.trim().toLowerCase();
    return GR_HISTORY.filter(r => {
      const passRange = inRange(r.date, from, to);
      const passSearch = !s || [r.id, r.po_no, r.supplier, r.receiver, r.doc_no].join(' ').toLowerCase().includes(s);
      const passIssue = !onlyIssues || (Number(r.damaged||0) > 0 || Number(r.returned||0) > 0);
      return passRange && passSearch && passIssue;
    });
  }, [q, from, to, onlyIssues]);

  const summary = useMemo(() => {
    const g = data.reduce((a,r)=>a + Number(r.good||0), 0);
    const d = data.reduce((a,r)=>a + Number(r.damaged||0), 0);
    const rv= data.reduce((a,r)=>a + Number(r.returned||0), 0);
    return `GR ${data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Ä¢ Good ${g} ‚Ä¢ Damaged ${d} ‚Ä¢ Returned ${rv}`;
  }, [data]);

  // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV (‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏±‡∏ß‡πÅ‡∏ñ‡∏ß)
  const exportCsv = () => {
    if (data.length === 0) return alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å');
    const rows = data.map(r => ({
      GR: r.id, Date: r.date, PO: r.po_no, Supplier: r.supplier, Receiver: r.receiver,
      DocNo: r.doc_no || '', Good: r.good, Damaged: r.damaged, Returned: r.returned
    }));
    downloadCsv(rows, 'GR-summary.csv');
  };

  // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πà‡∏≠‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
  const exportCsvLines = () => {
    const lines = data.flatMap(r => r.lines.map(l => ({
      GR: r.id, Date: r.date, PO: r.po_no, Supplier: r.supplier,
      Code: l.code, Name: l.name, Unit: l.unit,
      Good: l.good, Damaged: l.damaged, Returned: l.returned,
      Reason: l.reason || ''
    })));
    if (lines.length === 0) return alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å');
    downloadCsv(lines, 'GR-lines.csv');
  };

  return (
    <main style={wrap}>
      <h1 style={title}>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á (GR History)</h1>
      <p style={muted}>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡πÅ‡∏ñ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö</p>

      {/* ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå */}
      <section style={card}>
        <div style={toolbar}>
          <input type="date" value={from} onChange={e=>setFrom(e.target.value)} style={input}/>
          <input type="date" value={to}   onChange={e=>setTo(e.target.value)} style={input}/>
          <input placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ GR/PO/‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢/‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö/‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£" value={q} onChange={e=>setQ(e.target.value)} style={{...input, flex:'1 1 260px'}}/>
          <label style={{ display:'flex', alignItems:'center', gap:6 }}>
            <input type="checkbox" checked={onlyIssues} onChange={e=>setOnlyIssues(e.target.checked)}/>
            ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏≥‡∏£‡∏∏‡∏î/‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
          </label>
          <div style={{flex:1}}/>
          <button style={ghostBtn} onClick={exportCsv} disabled={data.length===0}>CSV (‡∏™‡∏£‡∏∏‡∏õ)</button>
          <button style={ghostBtn} onClick={exportCsvLines} disabled={data.length===0}>CSV (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</button>
        </div>
        <div style={{marginTop:6, color:'#374151'}}>{summary}</div>
      </section>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
      <section style={card}>
        <div style={{overflow:'auto'}}>
          <table style={{width:'100%', borderCollapse:'collapse', minWidth:980}}>
            <thead>
              <tr style={theadRow}>
                <th style={th}>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà GR</th>
                <th style={th}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                <th style={th}>PO</th>
                <th style={th}>‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢</th>
                <th style={th}>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö</th>
                <th style={th}>‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á</th>
                <th style={{...th, textAlign:'right'}}>Good</th>
                <th style={{...th, textAlign:'right'}}>Damaged</th>
                <th style={{...th, textAlign:'right'}}>Returned</th>
                <th style={th}>‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå</th>
                <th style={th}>Detail</th>
              </tr>
            </thead>
            <tbody>
              {data.length === 0 ? (
                <tr><td colSpan={11} style={{...td, textAlign:'center', color:'#6b7280'}}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td></tr>
              ) : data.map(r => (
                <React.Fragment key={r.id}>
                  <tr>
                    <td style={tdMono}>{r.id}</td>
                    <td style={td}>{r.date}</td>
                    <td style={td}>{r.po_no}</td>
                    <td style={td}>{r.supplier}</td>
                    <td style={td}>{r.receiver}</td>
                    <td style={td}>{r.doc_no || '-'}</td>
                    <td style={{...td, textAlign:'right'}}>{r.good}</td>
                    <td style={{...td, textAlign:'right', color: r.damaged>0 ? '#b45309' : undefined }}>{r.damaged}</td>
                    <td style={{...td, textAlign:'right', color: r.returned>0 ? '#b91c1c' : undefined }}>{r.returned}</td>
                    <td style={td}>
                      {r.attachments?.length ? r.attachments.map((n,i)=>(<span key={i}>üìé {n}{i<r.attachments.length-1?', ':''}</span>)) : '-'}
                    </td>
                    <td style={td}>
                      <button style={linkBtn} onClick={()=>setOpenId(openId===r.id?null:r.id)}>
                        {openId === r.id ? '‡∏ã‡πà‡∏≠‡∏ô' : '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}
                      </button>
                    </td>
                  </tr>

                  {openId === r.id && (
                    <tr>
                      <td colSpan={11} style={{...td, background:'#f9fafb'}}>
                        <div style={{ overflow:'auto' }}>
                          <table style={{ width:'100%', borderCollapse:'collapse', minWidth:800 }}>
                            <thead>
                              <tr style={theadRow}>
                                <th style={th}>‡∏£‡∏´‡∏±‡∏™</th>
                                <th style={th}>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                                <th style={{...th, textAlign:'right'}}>Good</th>
                                <th style={{...th, textAlign:'right'}}>Damaged</th>
                                <th style={{...th, textAlign:'right'}}>Returned</th>
                                <th style={th}>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</th>
                              </tr>
                            </thead>
                            <tbody>
                              {r.lines.map(l => (
                                <tr key={l.code}>
                                  <td style={tdMono}>{l.code}</td>
                                  <td style={td}>{l.name}</td>
                                  <td style={{...td, textAlign:'right'}}>{l.good}</td>
                                  <td style={{...td, textAlign:'right', color: l.damaged>0 ? '#b45309' : undefined }}>{l.damaged}</td>
                                  <td style={{...td, textAlign:'right', color: l.returned>0 ? '#b91c1c' : undefined }}>{l.returned}</td>
                                  <td style={td}>{l.reason || '-'}</td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </td>
                    </tr>
                  )}
                </React.Fragment>
              ))}
            </tbody>
          </table>
        </div>
      </section>
    </main>
  );
}

/** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function inRange(d, from, to) {
  const t = new Date(d).getTime();
  const f = from ? new Date(from).getTime() : -Infinity;
  const e = to ? new Date(to).getTime()   :  Infinity;
  return t >= f && t <= e;
}
function downloadCsv(arr, filename) {
  const header = Object.keys(arr[0] || {});
  const csv = [
    header.join(','),
    ...arr.map(r => header.map(h => `"${String(r[h] ?? '').replace(/"/g,'""')}"`).join(',')),
  ].join('\n');
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url; a.download = filename; a.click();
  URL.revokeObjectURL(url);
}

/** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ styles ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const wrap   = { padding:20, background:'#f9fafb', minHeight:'100vh' };
const title  = { fontSize:'1.4rem', fontWeight:700, margin:0 };
const muted  = { color:'#6b7280', marginBottom:12 };
const card   = { background:'#fff', padding:16, borderRadius:12, boxShadow:'0 2px 8px rgba(0,0,0,0.05)', marginBottom:12 };
const toolbar= { display:'flex', gap:10, alignItems:'center', flexWrap:'wrap' };
const input  = { padding:'8px 10px', border:'1px solid #e5e7eb', borderRadius:8 };
const ghostBtn = { background:'#fff', color:'#111827', border:'1px solid #d1d5db', padding:'8px 10px', borderRadius:8, cursor:'pointer' };
const table  = { width:'100%', borderCollapse:'collapse', minWidth:900 };
const theadRow = { background:'#f3f4f6' };
const th     = { textAlign:'left', padding:10, borderBottom:'1px solid #e5e7eb' };
const td     = { padding:10, borderBottom:'1px solid #f1f5f9' };
const tdMono = { ...td, fontFamily:'ui-monospace, SFMono-Regular, Menlo, Consolas, monospace' };
const linkBtn= { background:'transparent', color:'#2563eb', border:'none', cursor:'pointer', padding:0 };
