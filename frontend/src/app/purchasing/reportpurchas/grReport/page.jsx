"use client";

import { useState, useEffect } from "react";
import { purchasingAxios } from "@/app/utils/axiosInstance";
import styles from "./page.module.css";
import { FaSearch, FaFilter, FaFilePdf, FaFileExcel, FaCalendarAlt } from "react-icons/fa";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import * as XLSX from "xlsx";

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
const translateStatus = (status) => {
  switch (status) {
    case "pending":
      return "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£";
    case "partial":
      return "‡∏£‡∏±‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô";
    case "completed":
      return "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô";
    default:
      return status || "-";
  }
};

export default function GRReport() {
  const [grs, setGRs] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [monthRange, setMonthRange] = useState("all");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [loading, setLoading] = useState(true);

  const fetchData = async (range = "all", start = "", end = "") => {
    try {
      setLoading(true);
      const res = await purchasingAxios.get("/gr/report", {
        params: { monthRange: range, startDate: start, endDate: end },
      });
      setGRs(res.data);
    } catch (err) {
      console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô GR ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData(monthRange, startDate, endDate);
  }, [monthRange, startDate, endDate]);

  const filteredData = grs.filter((gr) =>
    (gr.gr_no + " " + (gr.supplier_name || "") + " " + (gr.po_no || "") + " " + (gr.item_name || ""))
      .toLowerCase()
      .includes(searchTerm.toLowerCase())
  );

  // ‚úÖ Export PDF
  const exportPDF = () => {
    const doc = new jsPDF();
    doc.text("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (GR Report)", 14, 10);
    autoTable(doc, {
      head: [["GR No", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö", "‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå", "PO No", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏™‡∏±‡πà‡∏á", "‡∏£‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]],
      body: filteredData.map((gr) => [
        gr.gr_no,
        new Date(gr.gr_date).toLocaleDateString("th-TH"),
        gr.supplier_name,
        gr.po_no,
        gr.item_name,
        gr.qty_ordered,
        gr.qty_received,
        translateStatus(gr.status),
      ]),
    });
    doc.save("gr_report.pdf");
  };

  // ‚úÖ Export Excel
  const exportExcel = () => {
    const ws = XLSX.utils.json_to_sheet(
      filteredData.map((gr) => ({
        "GR No": gr.gr_no,
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö": new Date(gr.gr_date).toLocaleDateString("th-TH"),
        "‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå": gr.supplier_name,
        "PO No": gr.po_no,
        "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤": gr.item_name,
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á": gr.qty_ordered,
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á": gr.qty_received,
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": translateStatus(gr.status),
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "GR Report");
    XLSX.writeFile(wb, "gr_report.xlsx");
  };

  return (
    <div className={styles.mainHome}>
      <div className={styles.container}>
        <h1 className={styles.pageTitle}>üöö ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (GR Report)</h1>

        {/* ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå */}
        <div className={styles.filters}>
          <div className={styles.searchContainer}>
            <FaSearch className={styles.searchIcon} />
            <input
              type="text"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ GR No / ‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå / PO No / ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={styles.input}
            />
          </div>

          <div className={styles.dateFilter}>
            <FaFilter className={styles.filterIcon} />
            <select
              value={monthRange}
              onChange={(e) => setMonthRange(e.target.value)}
              className={styles.dateInput}
            >
              <option value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
              <option value="1">1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
              <option value="3">3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
              <option value="6">6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
              <option value="12">12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
            </select>
          </div>

          <div className={styles.dateFilter}>
            <FaCalendarAlt className={styles.filterIcon} />
            <input
              type="date"
              value={startDate}
              onChange={(e) => {
                setStartDate(e.target.value);
                setMonthRange("custom");
              }}
              className={styles.dateInput}
            />
            <span className={styles.dateSeparator}>‡∏ñ‡∏∂‡∏á</span>
            <input
              type="date"
              value={endDate}
              onChange={(e) => {
                setEndDate(e.target.value);
                setMonthRange("custom");
              }}
              className={styles.dateInput}
            />
          </div>

          <div className={styles.exportButtons}>
            <button className={`${styles.exportBtn} ${styles.pdf}`} onClick={exportPDF}>
              <FaFilePdf size={18} /> PDF
            </button>
            <button className={`${styles.exportBtn} ${styles.excel}`} onClick={exportExcel}>
              <FaFileExcel size={18} /> Excel
            </button>
          </div>
        </div>

        {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
        <div className={styles.tableSection}>
          <div className={`${styles.tableGrid} ${styles.tableHeader}`}>
            <div>GR No</div>
            <div>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö</div>
            <div>‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå</div>
            <div>PO No</div>
            <div>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
            <div className={styles.centerCell}>‡∏™‡∏±‡πà‡∏á</div>
            <div className={styles.centerCell}>‡∏£‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á</div>
            <div>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</div>
          </div>

          {loading ? (
            <div className={styles.loadingContainer}>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
          ) : filteredData.length === 0 ? (
            <div className={`${styles.tableGrid} ${styles.tableRow}`}>
              <div className={styles.emptyRow}>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</div>
            </div>
          ) : (
            filteredData.map((gr, idx) => (
              <div key={gr.gr_id + "-" + idx} className={`${styles.tableGrid} ${styles.tableRow}`}>
                <div className={styles.textWrap}>{gr.gr_no}</div>
                <div>{new Date(gr.gr_date).toLocaleDateString("th-TH")}</div>
                <div>{gr.supplier_name}</div>
                <div>{gr.po_no}</div>
                <div className={styles.textWrap}>{gr.item_name}</div>
                <div className={styles.centerCell}>{gr.qty_ordered}</div>
                <div className={styles.centerCell}>{gr.qty_received}</div>
                <div className={styles.textWrap}>{translateStatus(gr.status)}</div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
}
