"use client";

import { useState, useEffect, useMemo } from "react";
import { purchasingAxios } from "@/app/utils/axiosInstance";
import styles from "./page.module.css";
import { FaSearch, FaFilter, FaFileExcel, FaFilePdf } from "react-icons/fa";
import * as XLSX from "xlsx";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

const statusOptions = [
    { value: "all", label: "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" },
    { value: "pending", label: "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" },
    { value: "approved", label: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" },
    { value: "completed", label: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" },
    { value: "canceled", label: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" },
];

export default function ReportPO() {
    const [data, setData] = useState([]);
    const [searchTerm, setSearchTerm] = useState("");
    const [statusFilter, setStatusFilter] = useState("all");
    const [startDate, setStartDate] = useState("");
    const [endDate, setEndDate] = useState("");
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true);
                const res = await purchasingAxios.get("/po");
                setData(res.data);
            } catch (err) {
                console.error("Error loading PO report:", err);
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const filtered = useMemo(() => {
        return data.filter((po) => {
            const matchSearch =
                po.po_no?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                po.supplier_name?.toLowerCase().includes(searchTerm.toLowerCase());

            const matchStatus =
                statusFilter === "all" ||
                po.po_status?.toLowerCase() === statusFilter.toLowerCase();

            const poDate = new Date(po.created_at);
            const matchDate =
                (!startDate || poDate >= new Date(startDate)) &&
                (!endDate || poDate <= new Date(endDate));

            return matchSearch && matchStatus && matchDate;
        });
    }, [data, searchTerm, statusFilter, startDate, endDate]);

    // ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
    const summary = useMemo(() => {
        const totalPOs = filtered.length;
        const subtotalSum = filtered.reduce((sum, po) => sum + Number(po.subtotal || 0), 0);
        const vatSum = filtered.reduce((sum, po) => sum + Number(po.vat_amount || 0), 0);
        const grandTotalSum = filtered.reduce((sum, po) => sum + Number(po.grand_total || 0), 0);

        return { totalPOs, subtotalSum, vatSum, grandTotalSum };
    }, [filtered]);

    // ‚úÖ Export Excel
    const exportExcel = () => {
        const ws = XLSX.utils.json_to_sheet(
            filtered.map((po) => ({
                "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà PO": po.po_no,
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": new Date(po.created_at).toLocaleDateString("th-TH"),
                "‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå": po.supplier_name,
                "‡∏£‡∏ß‡∏° (‡∏Å‡πà‡∏≠‡∏ô VAT)": po.subtotal,
                "VAT": po.vat_amount,
                "‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥": po.grand_total,
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": po.po_status,
            }))
        );
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "PO Report");
        XLSX.writeFile(wb, "report-po.xlsx");
    };

    // ‚úÖ Export PDF
    const exportPDF = () => {
        const doc = new jsPDF();
        doc.setFontSize(14);
        doc.text("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (PO)", 14, 16);

        autoTable(doc, {
            startY: 22,
            head: [["‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà PO", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå", "‡∏£‡∏ß‡∏°", "VAT", "‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]],
            body: filtered.map((po) => [
                po.po_no,
                new Date(po.created_at).toLocaleDateString("th-TH"),
                po.supplier_name,
                Number(po.subtotal).toLocaleString(),
                Number(po.vat_amount).toFixed(2),
                Number(po.grand_total).toFixed(2),
                po.po_status,
            ]),
        });

        doc.save("report-po.pdf");
    };

    return (
        <div className={styles.mainHome}>
            <div className={styles.pageBar}>
                <h1 className={styles.pageTitle}>üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (PO)</h1>

                <div className={styles.filters}>
                    <div className={styles.searchBar}>
                        <FaSearch className={styles.searchIcon} />
                        <input
                            type="text"
                            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: PO No ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className={styles.input}
                        />
                    </div>

                    <select
                        value={statusFilter}
                        onChange={(e) => setStatusFilter(e.target.value)}
                        className={styles.input}
                    >
                        {statusOptions.map((s) => (
                            <option key={s.value} value={s.value}>
                                {s.label}
                            </option>
                        ))}
                    </select>

                    <div className={styles.dateFilter}>
                        <FaFilter className={styles.filterIcon} />
                        <input
                            type="date"
                            value={startDate}
                            onChange={(e) => setStartDate(e.target.value)}
                            className={styles.input}
                        />
                        <span className={styles.dateSeparator}>‡∏ñ‡∏∂‡∏á</span>
                        <input
                            type="date"
                            value={endDate}
                            onChange={(e) => setEndDate(e.target.value)}
                            className={styles.input}
                        />
                    </div>

                    {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Export */}
                    <button onClick={exportExcel} className={styles.exportBtn}>
                        <FaFileExcel /> Excel
                    </button>
                    <button onClick={exportPDF} className={styles.exportBtn}>
                        <FaFilePdf /> PDF
                    </button>
                </div>
            </div>

            {/* ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° */}
            <div className={styles.summaryBox}>
                <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô PO: <strong>{summary.totalPOs}</strong> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                <p>‡∏£‡∏ß‡∏° (‡∏Å‡πà‡∏≠‡∏ô VAT): <strong>{summary.subtotalSum.toLocaleString()} ‡∏ö‡∏≤‡∏ó</strong></p>
                <p>VAT ‡∏£‡∏ß‡∏°: <strong>{summary.vatSum.toLocaleString()} ‡∏ö‡∏≤‡∏ó</strong></p>
                <p>‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏ß‡∏°: <strong>{summary.grandTotalSum.toLocaleString()} ‡∏ö‡∏≤‡∏ó</strong></p>
            </div>

            {loading ? (
                <div className={styles.loadingContainer}>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
            ) : filtered.length === 0 ? (
                <div className={styles.noDataMessage}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</div>
            ) : (
                <div className={styles.tableSection}>
                    <div className={`${styles.tableGrid} ${styles.tableHeader}`}>
                        <div>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà PO</div>
                        <div>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</div>
                        <div>‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå</div>
                        <div>‡∏£‡∏ß‡∏° (‡∏Å‡πà‡∏≠‡∏ô VAT)</div>
                        <div>VAT</div>
                        <div>‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</div>
                        <div>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</div>
                    </div>
                    {filtered.map((po) => (
                        <div key={po.po_id} className={`${styles.tableGrid} ${styles.tableRow}`}>
                            <div>{po.po_no}</div>
                            <div>{new Date(po.created_at).toLocaleDateString("th-TH")}</div>
                            <div>{po.supplier_name}</div>
                            <div>{Number(po.subtotal).toLocaleString()} ‡∏ö‡∏≤‡∏ó</div>
                            <div>{Number(po.vat_amount).toFixed(2)} ‡∏ö‡∏≤‡∏ó</div>
                            <div>{Number(po.grand_total).toFixed(2)} ‡∏ö‡∏≤‡∏ó</div>
                            <div>{po.po_status}</div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
}
