"use client";

import { useState, useEffect } from "react";
import axiosInstance from "@/app/utils/axiosInstance";
import Swal from "sweetalert2";
import { useRouter } from "next/navigation";
import styles from "./page.module.css";

const GoodsReceiptCreatePage = () => {
    const router = useRouter();

    const [poList, setPoList] = useState([]);
    const [selectedPO, setSelectedPO] = useState(null);
    const [receiptData, setReceiptData] = useState({
        delivery_no: "",
        invoice_no: "",
        receipt_date: new Date().toISOString().split("T")[0],
        note: "",
    });
    const [receivedItems, setReceivedItems] = useState({});

    // ‡πÇ‡∏´‡∏•‡∏î PO ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á
    useEffect(() => {
        const fetchPOs = async () => {
            try {
                const res = await axiosInstance.get("/po?status=pending");
                setPoList(res.data);
            } catch (err) {
                Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", err.response?.data?.message || err.message, "error");
            }
        };
        fetchPOs();
    }, []);

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å PO
    const handleSelectPO = async (id) => {
        if (!id) {
            setSelectedPO(null);
            setReceivedItems({});
            return;
        }
        try {
            const res = await axiosInstance.get(`/po/${id}`);
            setSelectedPO(res.data);
            console.log("‚úÖ Loaded PO", res.data);

            const init = {};
            res.data.items.forEach((item) => {
                init[item.po_item_id] = { qty_received: 0, lot: "", mfg: "", expiry: "" };
            });
            setReceivedItems(init);
        } catch (err) {
            Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÇ‡∏´‡∏•‡∏î PO ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
        }
    };

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
    const handleItemChange = (id, field, value) => {
        setReceivedItems({
            ...receivedItems,
            [id]: { ...receivedItems[id], [field]: value },
        });
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const validateBeforeSave = async () => {
        if (!selectedPO) {
            await Swal.fire("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å PO ‡∏Å‡πà‡∏≠‡∏ô", "warning");
            return false;
        }

        let hasQty = false;

        for (const item of selectedPO.items) {
            const val = receivedItems[item.po_item_id];
            const qty = parseInt(val?.qty_received) || 0;

            if (qty > 0) {
                hasQty = true;

                // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô
                if (qty > item.quantity) {
                    await Swal.fire(
                        "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
                        `‡∏´‡πâ‡∏≤‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (${item.quantity} ${item.unit})`,
                        "warning"
                    );
                    return false;
                }

                // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å Lot ‚Üí ‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
                if (!val.lot) {
                    const result = await Swal.fire({
                        title: `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å Lot ‡∏Ç‡∏≠‡∏á ${item.item_name}`,
                        text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Lot ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
                        icon: "question",
                        showCancelButton: true,
                        confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
                        cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                    });

                    if (result.isConfirmed) {
                        // ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö generate lot ‡πÄ‡∏≠‡∏á ‚Üí ‡πÉ‡∏™‡πà marker ‡πÄ‡∏ä‡πà‡∏ô AUTO
                        receivedItems[item.po_item_id].lot = "AUTO";
                    } else {
                        return false; // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    }
                }

                if (!val.mfg) {
                    await Swal.fire("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á ${item.item_name}`, "warning");
                    return false;
                }
                if (!val.expiry) {
                    await Swal.fire("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á ${item.item_name}`, "warning");
                    return false;
                }
            }
        }

        if (!hasQty) {
            await Swal.fire("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "warning");
            return false;
        }

        return true;
    };


    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å GR
    const handleSaveReceipt = async () => {
        if (!validateBeforeSave()) return;

        try {
            const payload = {
                po_id: selectedPO.po_id,
                delivery_no: receiptData.delivery_no,
                invoice_no: receiptData.invoice_no,
                receipt_date: receiptData.receipt_date,
                note: receiptData.note,
                items: selectedPO.items.map((item) => ({
                    po_item_id: item.po_item_id,
                    item_id: item.item_id,   // üëà ‡∏™‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤
                    qty_received: parseInt(receivedItems[item.po_item_id]?.qty_received) || 0,
                    lot_no: receivedItems[item.po_item_id]?.lot || "",
                    mfg_date: receivedItems[item.po_item_id]?.mfg || null,
                    expiry_date: receivedItems[item.po_item_id]?.expiry || null,
                    unit: item.unit || null,
                })),
            };

            const res = await axiosInstance.post("/gr", payload);
            Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ GR ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${res.data.gr_no}`, "success");
            router.push("/purchasing/goodsReceipt");
        } catch (err) {
            Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", err.response?.data?.message || err.message, "error");
        }
    };

    return (
        <div className={styles.container}>
            <h1 className={styles.title}>‚ûï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</h1>

            {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å PO */}
            <div className={styles.selector}>
                <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å PO: </label>
                <select onChange={(e) => handleSelectPO(e.target.value)} value={selectedPO?.po_id || ""}>
                    <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
                    {poList.map((po) => (
                        <option key={po.po_id} value={po.po_id}>
                            {po.po_no} - {po.supplier_name}
                        </option>
                    ))}
                </select>
            </div>

            {selectedPO && (
                <div className={styles.detail}>
                    <h2>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î PO: {selectedPO.po_no}</h2>

                    {/* ‡∏ü‡∏≠‡∏£‡πå‡∏° */}
                    <div className={styles.section}>
                        <input type="text" placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á" value={receiptData.delivery_no}
                            onChange={(e) => setReceiptData({ ...receiptData, delivery_no: e.target.value })} />
                        <input type="text" placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ" value={receiptData.invoice_no}
                            onChange={(e) => setReceiptData({ ...receiptData, invoice_no: e.target.value })} />
                        <input type="date" value={receiptData.receipt_date}
                            onChange={(e) => setReceiptData({ ...receiptData, receipt_date: e.target.value })} />
                        <textarea placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" value={receiptData.note}
                            onChange={(e) => setReceiptData({ ...receiptData, note: e.target.value })}></textarea>
                    </div>

                    {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
                    <table className={styles.table}>
                        <thead>
                            <tr>
                                <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</th>
                                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á</th>
                                <th>Lot</th>
                                <th>‡∏ß‡∏±‡∏ô‡∏ú‡∏•‡∏¥‡∏ï</th>
                                <th>‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</th>
                            </tr>
                        </thead>
                        <tbody>
                            {selectedPO.items.map((item) => (
                                <tr key={item.po_item_id}>
                                    <td>{item.item_name}</td>
                                    <td>{item.quantity} {item.unit}</td>
                                    <td>
                                        <input type="number" min="0" max={item.quantity}
                                            className={styles.inputItem}
                                            value={receivedItems[item.po_item_id]?.qty_received || ""}
                                            onChange={(e) => handleItemChange(item.po_item_id, "qty_received", e.target.value)} />
                                    </td>
                                    <td>
                                        <input type="text" placeholder="Lot No."
                                            value={receivedItems[item.po_item_id]?.lot || ""}
                                            onChange={(e) => handleItemChange(item.po_item_id, "lot", e.target.value)} />
                                    </td>
                                    <td>
                                        <input type="date"
                                            value={receivedItems[item.po_item_id]?.mfg || ""}
                                            onChange={(e) => handleItemChange(item.po_item_id, "mfg", e.target.value)} />
                                    </td>
                                    <td>
                                        <input type="date"
                                            value={receivedItems[item.po_item_id]?.expiry || ""}
                                            onChange={(e) => handleItemChange(item.po_item_id, "expiry", e.target.value)} />
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    <div className={styles.footer}>
                        <button className={styles.button} onClick={handleSaveReceipt}>‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default GoodsReceiptCreatePage;
