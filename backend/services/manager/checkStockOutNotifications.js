// backend/rules/checkStockOutNotifications.js
const { pool } = require("../../config/db");
const Notification = require("../../models/notificationModel");

async function checkStockOutNotifications() {
  console.log("‚è≥ Running rule: checkStockOutNotifications...");
  try {
    const RULE_STOCK_OUT = 7;
    const TARGET_USER_ID = 999;

    // ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å
    const stockoutTypeTranslations = {
      return_lost: "‡∏Ñ‡∏∑‡∏ô - ‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢",
      borrow: "‡∏¢‡∏∑‡∏°",
      withdraw: "‡πÄ‡∏ö‡∏¥‡∏Å",
      expired_dispose: "‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ - ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
      default: "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
    };

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà user-friendly
    const recentStockOuts = await pool.query(
      `
      SELECT so.stockout_id, so.stockout_no, so.stockout_date, so.stockout_type, so.user_id,
             r.request_code,
             u.user_fname || ' ' || u.user_lname AS creator_name,
             il.lot_no,
             i.item_name
      FROM stock_outs so
      LEFT JOIN requests r 
        ON so.note LIKE 'request#%' 
       AND r.request_id = CAST(SUBSTRING(so.note FROM 'request#(\\d+)') AS INTEGER)
      LEFT JOIN stock_out_details sod ON so.stockout_id = sod.stockout_id
      LEFT JOIN item_lots il ON sod.lot_id = il.lot_id
      LEFT JOIN items i ON sod.item_id = i.item_id
      LEFT JOIN users u ON so.user_id = u.user_id
      WHERE NOT EXISTS (
          SELECT 1 FROM notification_log nl
          WHERE nl.rule_id = $1 AND nl.related_table = 'stock_outs' AND nl.related_id = so.stockout_id
      )
      `,
      [RULE_STOCK_OUT]
    );

    for (const stockOut of recentStockOuts.rows) {
      // ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥ (‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô)
      const { rows: already } = await pool.query(
        `SELECT 1 FROM notification_log 
         WHERE rule_id = $1 AND related_table = 'stock_outs' AND related_id = $2`,
        [RULE_STOCK_OUT, stockOut.stockout_id]
      );
      if (already.length > 0) continue;

      // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      const translatedType =
        stockoutTypeTranslations[stockOut.stockout_type] ||
        stockoutTypeTranslations["default"];

      // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
      const lotInfo = stockOut.lot_no ? `Lot: ${stockOut.lot_no}` : "";
      const itemInfo = stockOut.item_name ? ` (${stockOut.item_name})` : "";
      const requestRef = stockOut.request_code
        ? `‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: ${stockOut.request_code}`
        : "";

      // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡πâ‡∏ß)
      const message =
        `‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n` +
        `‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${stockOut.stockout_no}\n` +
        `‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å: ${translatedType}\n` +
        `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date(stockOut.stockout_date).toLocaleString("th-TH", {
          timeZone: "Asia/Bangkok",
        })}\n` +
        `${lotInfo}${itemInfo ? " " + itemInfo : ""}\n` +
        (requestRef ? requestRef + "\n" : "") +
        `‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${stockOut.creator_name || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"}`;

      const title = `üì¶ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å (${stockOut.stockout_no})`;

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Notification
      await Notification.create(
        TARGET_USER_ID,
        title,
        message,
        "stock_out", // category
        "stock_outs", // related_table
        stockOut.stockout_id
      );

      // ‚úÖ ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
      await pool.query(
        `INSERT INTO notification_log (rule_id, related_table, related_id, sent_at)
         VALUES ($1, 'stock_outs', $2, NOW())`,
        [RULE_STOCK_OUT, stockOut.stockout_id]
      );

      console.log(
        `üì° Stock Out Notified => stockout_no=${stockOut.stockout_no}, type=${translatedType}`
      );
    }

    console.log(
      `‚úÖ Stock Out Alerts checked: ${recentStockOuts.rows.length} items`
    );
  } catch (err) {
    console.error("‚ùå Error in checkStockOutNotifications:", err.message);
  }
}

module.exports = { checkStockOutNotifications };
