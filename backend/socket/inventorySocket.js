const inventoryModel = require('../models/inventoryModel');
const { getIO } = require('../socketIO'); // ‚úÖ ‡πÉ‡∏ä‡πâ getIO ‡πÅ‡∏ó‡∏ô‡∏™‡πà‡∏á io ‡∏ú‡πà‡∏≤‡∏ô param

// -------------------------
// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡πà‡∏≤‡∏ô WS
// -------------------------
exports.getItemsWS = async (socket) => {
  try {
    const items = await inventoryModel.getAllItemsDetailed();
    console.log('üü¢ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inventory ‡∏Å‡∏•‡∏±‡∏ö:', items.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');

    // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ client ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠
    socket.emit('itemsData', items);

    // ‡πÅ‡∏•‡∏∞ broadcast ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å client ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ inventory update
    const io = getIO();
    io.emit('inventory:update', items);
  } catch (err) {
    console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (WS):', err);
    socket.emit('itemsError', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  }
};

// -------------------------
// REST API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô
// -------------------------
exports.getItemById = async (req, res) => {
  try {
    const { id } = req.params;
    if (!id) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ id' });
    }

    const item = await inventoryModel.getItemById(id);

    if (!item) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏' });
    }

    res.status(200).json(item);
  } catch (error) {
    console.error('‚ùå Error fetching item by id:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô server' });
  }
};

// -------------------------
// REST API: ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î
// -------------------------
exports.reportDamaged = async (req, res) => {
  try {
    const { lot_id, item_id, qty, note } = req.body;

    if (!lot_id || !item_id || !qty) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ lot_id, item_id ‡πÅ‡∏•‡∏∞ qty' });
    }

    const result = await inventoryModel.reportDamaged({ lot_id, item_id, qty, note });

    // ‡πÅ‡∏à‡πâ‡∏á broadcast inventory ‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô WS ‡∏î‡πâ‡∏ß‡∏¢
    const io = getIO();
    const updatedItems = await inventoryModel.getAllItemsDetailed();
    io.emit('inventory:update', updatedItems);

    res.status(200).json(result);
  } catch (error) {
    console.error('‚ùå Error report damaged:', error);
    res.status(400).json({ message: error.message || '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß' });
  }
};
