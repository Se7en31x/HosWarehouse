// middleware/auth.js
const jwt = require("jsonwebtoken");
require("dotenv").config();

function authMiddleware(roles = []) {
  return (req, res, next) => {
    const authHeader = req.headers.authorization;
    console.log("üì• Incoming Authorization header:", authHeader || "‚ùå NONE");

    if (!authHeader) {
      return res.status(401).json({ error: "No token provided" });
    }

    const token = authHeader.split(" ")[1];
    console.log("üîé Extracted token:", token ? token.slice(0, 30) + "..." : "‚ùå NONE");

    try {
      // ‚úÖ verify token
      const decoded = jwt.verify(token, process.env.JWT_SECRET);

      // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á id ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô int
      req.user = {
        id: decoded.id ? parseInt(decoded.id, 10) : null, 
        username: decoded.username,
        role: decoded.role,
        is_active: decoded.is_active,
        departments: decoded.departments || [],
      };

      // console.log("üîë decoded JWT payload:", decoded);
      // console.log("üëâ req.user.id (int):", req.user.id);
      // console.log("‚úÖ role in token:", decoded.role);
      // console.log("‚úÖ roles allowed on this route:", roles);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role
      if (roles.length > 0 && !roles.includes(req.user.role)) {
        console.warn("‚õî Forbidden: role not allowed:", req.user.role);
        return res.status(403).json({ error: "Forbidden: insufficient rights" });
      }

      next();
    } catch (err) {
      console.error("‚ùå Auth error: JWT verification failed");
      console.error("   ‚Üí Message:", err.message);
      return res.status(401).json({ error: "Invalid or expired token" });
    }
  };
}

module.exports = authMiddleware;
