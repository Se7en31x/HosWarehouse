const purchaseRequestModel = require("../models/purchaseRequestModel");

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.getItems = async (req, res) => {
  try {
    const items = await purchaseRequestModel.getItems();
    return res.json(items);
  } catch (err) {
    console.error("‚ùå getItems error:", err.message);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á PR (header)
exports.getAllPurchaseRequests = async (req, res) => {
  try {
    const requests = await purchaseRequestModel.getAllPurchaseRequests();
    return res.json(requests);
  } catch (err) {
    console.error("‚ùå getAllPurchaseRequests error:", err.message);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á PR Items ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (flatten)
exports.getAllPurchaseRequestItems = async (req, res) => {
  try {
    const items = await purchaseRequestModel.getAllPurchaseRequestItems();
    return res.json(items);
  } catch (err) {
    console.error("‚ùå getAllPurchaseRequestItems error:", err.message);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á PR ‡∏ï‡∏≤‡∏° id
exports.getPurchaseRequestById = async (req, res) => {
  try {
    const { id } = req.params;
    const pr = await purchaseRequestModel.getPurchaseRequestById(id);
    if (!pr) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" });
    }
    return res.json(pr);
  } catch (err) {
    console.error("‚ùå getPurchaseRequestById error:", err.message);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
  }
};

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PR
exports.createPurchaseRequest = async (req, res) => {
  try {
    const requester_id = req.user?.id; // ‚úÖ ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å token
    const { items_to_purchase } = req.body;

    if (!requester_id || !items_to_purchase?.length) {
      return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    }

    const results = await Promise.all(
      items_to_purchase.map((item) =>
        purchaseRequestModel.createPurchaseRequest({
          requester_id,
          item_id: item.item_id,
          qty_requested: item.qty,
          unit: item.unit,
          note: item.note,
        })
      )
    );

    return res.status(201).json({
      message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: results,
    });
  } catch (err) {
    console.error("‚ùå createPurchaseRequest error:", err.message);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
  }
};

// ‚úÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PR
exports.getPRReport = async (req, res) => {
  try {
    const { monthRange, startDate, endDate } = req.query;

    console.log("üì• PR Report params:", { monthRange, startDate, endDate });

    let start = startDate;
    let end = endDate;

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å monthRange
    if (monthRange && monthRange !== "all" && monthRange !== "custom") {
      const now = new Date();
      end = now.toISOString().split("T")[0];
      const past = new Date();
      past.setMonth(past.getMonth() - parseInt(monthRange));
      start = past.toISOString().split("T")[0];
    }

    const result = await purchaseRequestModel.getPRReport({ startDate: start, endDate: end });
    return res.json(result);
  } catch (err) {
    console.error("‚ùå getPRReport error:", err.message);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
  }
};
